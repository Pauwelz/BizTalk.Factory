// Copyright © 2012 - 2014 François Chabot, Yves Dierick
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

******************************************************************************
*                                                                            *
*                     !!!!   IMPORTANT REMARK   !!!!                         *
*                                                                            *
* The R# workaround only works after the whole solution has been compiled    *
* successfully at least once.                                                *
*                                                                            *
******************************************************************************

Essentially, this project is a dummy/fake class library that references all
BizTalk Server generated code files and assemblies so that ReSharper is aware
of all of them.

Specifically, this project serves the following purposes:

1/ It ensures that the MSBuild.Extension.Pack nuget package is restored early
   in during the build process; as the extension pack's tasks are being used by
	other projects in the solution.

2/ It makes all of the code files generated by the BizTalk Compiler visible to
   ReSharper so that ReSharper's code analysis and refactoring work as expected.
   This project must be consequently referenced by all the projects that rely on
   the code generated in one of these files.

   Referencing this project must be done in the way that will prevent it from
	being taken into account for compilation; adding a Condition on the
	ProjectReference ItemGroup such as follows will do the trick:

   <ItemGroup>
      <ProjectReference Include="..\BizTalk.Generated.Items\Be.Stateless.BizTalk.Generated.Items.csproj"
                        Condition=" 'ReSharper' == 'Intellisense' ">
         <Project>{D73E3CF5-25E6-4059-A50F-268287F9D148}</Project>
         <Name>Be.Stateless.BizTalk.Generated.Items</Name>
      </ProjectReference>
   </ItemGroup>

   Recall that the whole point of this is not to compile these files but to
	merely have them brought to ReSharper's knowledge.

   Notice the CoreCompile and CopyFilesToOutputDirectory MSBuild targets have
	been overridden to skip compilation without failure. This class library will
	therefore produce no assembly, though being taken into account for
	compilation.

3/ It also references all of the BizTalk Server assemblies so that ReSharper's
   'add reference' and 'remove unused reference' keep working for all other
	projects in the solution.