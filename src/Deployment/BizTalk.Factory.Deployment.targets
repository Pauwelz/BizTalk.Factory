<?xml version="1.0" encoding="utf-8" ?>
<!--
  Deployment Framework for BizTalk
  Copyright (C) 2008-14 Thomas F. Abraham, 2004-08 Scott Colestock
-->
<!--
  Copyright © 2012 - 2015 François Chabot, Yves Dierick

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- TODO Failed Process Alerting -->
  <!-- TODO possibility to call any custom target wrt. SetDeployProperties;LoadPropsFromEnvSettingsThenExecute -->

  <PropertyGroup Condition=" '$(Configuration)' != 'Server' ">
    <DeploymentFrameworkTargetsPath>$(MSBuildExtensionsPath)\DeploymentFrameworkForBizTalk\5.0\</DeploymentFrameworkTargetsPath>
    <DeployTools Condition=" '$(DeployTools)' == '' ">$(MSBuildThisFileDirectory)..\..\utils\Deployment Tools</DeployTools>
    <!--Where to put the MSI package -->
    <OutputPath Condition=" '$(OutputPath)' == '' ">bin\$(Configuration)\Installer\$(ProjectName)\</OutputPath>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Server' ">
    <DeploymentFrameworkTargetsPath>$(MSBuildThisFileDirectory)Framework\</DeploymentFrameworkTargetsPath>
    <DeployTools>$(DeploymentFrameworkTargetsPath)DeployTools</DeployTools>
    <!-- Avoid deploying PDB to GAC, to avoid stopping all BizTalk host instances when deploying/undeploying -->
    <DeployPDBsToGac>false</DeployPDBsToGac>
  </PropertyGroup>

  <!-- common and specific spreadsheet settings -->
  <PropertyGroup>
    <CommonSettingsSpreadsheetPath Condition=" '$(CommonSettingsSpreadsheetPath)' == '' "
      >$(MSBuildThisFileDirectory)EnvironmentSettings\Common.SettingsFileGenerator.xml</CommonSettingsSpreadsheetPath>
    <CommonSettingsFilesExportPath Condition=" '$(CommonSettingsFilesExportPath)' == '' "
      >$(MSBuildThisFileDirectory)EnvironmentSettings\.Exports\Common</CommonSettingsFilesExportPath>
    <SettingsSpreadsheetPath Condition=" '$(SettingsSpreadsheetPath)' == '' "
      >$(MSBuildThisFileDirectory)EnvironmentSettings\$(ProjectName).SettingsFileGenerator.xml</SettingsSpreadsheetPath>
    <SettingsFilesExportPath Condition=" '$(SettingsFilesExportPath)' == '' "
      >$(MSBuildThisFileDirectory)EnvironmentSettings\.Exports\$(ProjectName)</SettingsFilesExportPath>
  </PropertyGroup>

  <!-- import BizTalk Deployment Framework targets -->
  <PropertyGroup>
    <!--
      TODO BTDF Bug: see https://biztalkdeployment.codeplex.com/workitem/10782
      FrameworkDir property is not set to the expected value when btdfproj script is run inside a Visual Studio command prompt
      hence reset it so that it gets computed correctly by BTDF
    -->
    <FrameworkDir Condition=" '$(FrameworkDir)' != '' "></FrameworkDir>
  </PropertyGroup>
  <Import Project="$(DeploymentFrameworkTargetsPath)BizTalkDeploymentFramework.targets" />
  <Import Project="$(DeployTools)\MSBuild.Extension.Pack.targets" />
  <Import Project="BizTalk.Factory.Deployment.IgnoreStandardErrorsAndWarnings.targets" Condition=" '$(IgnoreStandardErrorWarningFormat)' == 'true' " />

  <PropertyGroup>
    <UndeployBizTalkMgmtDBfalseDependsOn>
      CustomPreInitialize;
      FrameworkInitialize;
      CustomPostInitialize;
      CustomUndeployTarget;
      ConditionalHostStop;
      UndeployComponents;
      UndeployExternalAssemblies;
      UndeploySharedAssemblies;
      UndeployPipelineComponents;
      UndeployCustomFunctoids;
      UndeployVDirs;
      UndeployBtsNtSvcExeConfig;
      CustomPostUndeployTarget;
    </UndeployBizTalkMgmtDBfalseDependsOn>
  </PropertyGroup>

  <!--
     ____ _______ _____  ______   _______                   _     _____                            _                         _____       _           _   _
    |  _ |__   __|  __ \|  ____| |__   __|                 | |   |  __ \                          | |                       |_   _|     (_)         | | (_)
    | |_) | | |  | |  | | |__       | | __ _ _ __ __ _  ___| |_  | |  | | ___ _ __   ___ _ __   __| | ___ _ __   ___ _   _    | |  _ __  _  ___  ___| |_ _  ___  _ __  ___
    |  _ <  | |  | |  | |  __|      | |/ _` | '__/ _` |/ _ | __| | |  | |/ _ | '_ \ / _ | '_ \ / _` |/ _ | '_ \ / __| | | |   | | | '_ \| |/ _ \/ __| __| |/ _ \| '_ \/ __|
    | |_) | | |  | |__| | |         | | (_| | | | (_| |  __| |_  | |__| |  __| |_) |  __| | | | (_| |  __| | | | (__| |_| |  _| |_| | | | |  __| (__| |_| | (_) | | | \__ \
    |____/  |_|  |_____/|_|         |_|\__,_|_|  \__, |\___|\__| |_____/ \___| .__/ \___|_| |_|\__,_|\___|_| |_|\___|\__, | |_____|_| |_| |\___|\___|\__|_|\___/|_| |_|___/
                                                  __/ |                      | |                                      __/ |            _/ |
                                                 |___/                       |_|                                     |___/            |__/
    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=BTDF%20Target%20Dependency%20Injections%0A -->

  <!-- DEPRECATED: Use Target's BeforeTargets and AfterTargets attributes instead, see https://biztalkdeployment.codeplex.com/discussions/572131 -->

  <Target Name="PatchDeploy" DependsOnTargets="SetPatchDeployProperties;LoadPropsFromEnvSettingsThenExecute" />

  <Target Name="SetPatchDeployProperties">
    <PropertyGroup>
      <TargetsAfterLoadPropsFromEnvSettings>
        _PreprocessBindings;
        StopWindowsServices;
        _UpdateOrchestration;
        StartWindowsServices
      </TargetsAfterLoadPropsFromEnvSettings>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <!-- CustomPostInitialize is not called when preprocessing and importing bindings, and there is no need to have service config files being preprocessed again in that case -->
    <CustomPostInitializeDependsOn>
      EnsureWindowsServiceConfigFilesPreprocessing
    </CustomPostInitializeDependsOn>
  </PropertyGroup>
  <Target Name="CustomPostInitialize" DependsOnTargets="$(CustomPostInitializeDependsOn)" />

  <PropertyGroup>
    <!-- also make sure DeployExternalAssemblies happens before DeploySchemas, see https://biztalkdeployment.codeplex.com/discussions/572130 -->
    <CustomDeployDependsOn>
      CreateAndSecureDirectoriesAndFiles;
      DeployBizTalkLog4netConfig;
      DeployExternalAssemblies
    </CustomDeployDependsOn>
  </PropertyGroup>
  <Target Name="CustomDeployTarget" DependsOnTargets="$(CustomDeployDependsOn)" />

  <PropertyGroup>
    <CustomPostDeployDependsOn>
      ApplyConfigFilesCustomizations;
      CreateBamIndexes;
      CreateMsmqQueues;
      DeployCertificates;
      DeployDatabases;
      SetupBizTalkBackupForCustomDatabases;
      DeployFluentApplicationBindings;
      DeployPolicies;
      RegisterProcessNames;
      DeployWindowsServices;
      RegisterQuartzJobs;
    </CustomPostDeployDependsOn>
  </PropertyGroup>
  <Target Name="CustomPostDeployTarget" DependsOnTargets="$(CustomPostDeployDependsOn)" />

  <PropertyGroup>
    <CustomUndeployDependsOn>
      PrepareAppForUndeploy;
      UnregisterQuartzJobs;
      UndeployWindowsServices;
      UnregisterProcessNames;
      UndeployPolicies;
      UndeployFluentApplicationBindings;
      TeardownBizTalkBackupForCustomDatabases;
      UndeployDatabases;
      UndeployCertificates;
      DeleteMsmqQueues;
      RevertConfigFilesCustomizations;
    </CustomUndeployDependsOn>
  </PropertyGroup>
  <Target Name="CustomUndeployTarget" DependsOnTargets="$(CustomUndeployDependsOn)" />

  <PropertyGroup>
    <CustomPostUndeployDependsOn>
      UndeployBizTalkLog4netConfig
    </CustomPostUndeployDependsOn>
  </PropertyGroup>
  <Target Name="CustomPostUndeployTarget" DependsOnTargets="$(CustomPostUndeployDependsOn)" />

  <PropertyGroup>
    <CustomPreRedistDependsOn />
  </PropertyGroup>
  <Target Name="CustomPreRedist" DependsOnTargets="$(CustomPreRedistDependsOn)" />

  <PropertyGroup>
    <CustomRedistDependsOn>
      CopyApplicationBindingsToRedist;
      CopyAdditionalItemsToRedist;
      CopyCertificatesToRedist;
      CopyCustomDeployToolsToRedist;
      CopyCustomMsbuildProjectFilesToRedist;
      CopyDatabaseDeploymentScriptsToRedist;
      CopyPoliciesToRedist;
      CopyWindowsServiceFilesToRedist;
      CopyQuartzJobsFilesToRedist
    </CustomRedistDependsOn>
  </PropertyGroup>
  <Target Name="CustomRedist" DependsOnTargets="$(CustomRedistDependsOn)" />

  <!--
     ____          __  __   _____           _
    |  _ \   /\   |  \/  | |_   _|         | |
    | |_) | /  \  | \  / |   | |  _ __   __| | _____  _____ ___
    |  _ < / /\ \ | |\/| |   | | | '_ \ / _` |/ _ \ \/ / _ / __|
    | |_) / ____ \| |  | |  _| |_| | | | (_| |  __/>  |  __\__ \
    |____/_/    \_|_|  |_| |_____|_| |_|\__,_|\___/_/\_\___|___/


    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=BAM%20Indexes -->

  <Target Name="CreateBamIndexes" Condition=" '$(IncludeBAM)' == 'true' and '$(SkipBamUndeploy)' == 'false' and '@(BamIndexes)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Creating BAM indexes..." />

    <Exec Command="&quot;$(BtsDir)Tracking\bm.exe&quot; create-index -Activity:&quot;%(BamIndexes.Activity)&quot; -IndexName:&quot;IX_%(BamIndexes.Identity)&quot; -Checkpoint:&quot;%(BamIndexes.Identity)&quot;" />

    <Message Text="Created BAM indexes." />
  </Target>

  <Target Name="ExportBAMXMLFromXLS">
    <!-- override ExportBAMXMLFromXLS target to do nothing as we are directly using the XML activity model and not the Excel workbook -->
  </Target>

  <!--
     ____ _______ _____ _   _ _______ _____            _             _  _              _                     __ _
    |  _ |__   __/ ____| \ | |__   __/ ____|          | |           | || |            | |                   / _(_)
    | |_) | | | | (___ |  \| |  | | | (_____   _____  | | ___   __ _| || |_ _ __   ___| |_   ___ ___  _ __ | |_ _  __ _
    |  _ <  | |  \___ \| . ` |  | |  \___ \ \ / / __| | |/ _ \ / _` |__   _| '_ \ / _ | __| / __/ _ \| '_ \|  _| |/ _` |
    | |_) | | |  ____) | |\  |  | |  ____) \ V | (__  | | (_) | (_| |  | | | | | |  __| |_ | (_| (_) | | | | | | | (_| |
    |____/  |_| |_____/|_| \_|  |_| |_____/ \_/ \___| |_|\___/ \__, |  |_| |_| |_|\___|\__(_\___\___/|_| |_|_| |_|\__, |
                                                                __/ |                                              __/ |
                                                               |___/                                              |___/
    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=BTSNTSvc%20log4net.config -->

  <Target Name="DeployBizTalkLog4netConfig" DependsOnTargets="PreprocessFiles" Condition=" Exists('..\BTSNTSvc.log4net.config') and '$(ProjectName)' == 'BizTalk.Factory' and '$(EnableXmlPreprocess)' == 'true' ">
    <Message Text="Deploying log4net.config to BizTalk Server installation directory..." />

    <!-- this target must be executed only when deploying BizTalk Factory and not when deploying an application that depends on BizTalk Factory -->
    <Copy SourceFiles="..\BTSNTSvc.log4net.config" DestinationFiles="$(BtsDir)log4net.config" />

    <Message Text="Deployed log4net.config to BizTalk Server installation directory." />
  </Target>

  <Target Name="UndeployBizTalkLog4netConfig" Condition=" Exists('$(BtsDir)log4net.config') and '$(ProjectName)' == 'BizTalk.Factory' and '$(EnableXmlPreprocess)' == 'true' ">
    <Message Text="Undeploying log4net.config from BizTalk Server installation directory..." />

    <!-- this target must be executed only when deploying BizTalk Factory and not when deploying an application that depends on BizTalk Factory -->
    <Delete Files="$(BtsDir)log4net.config" ContinueOnError="true" />

    <Message Text="Undeployed log4net.config from BizTalk Server installation directory." />
  </Target>

  <!--
      _____          _   _  __ _           _
     / ____|        | | (_)/ _(_)         | |
    | |     ___ _ __| |_ _| |_ _  ___ __ _| |_ ___ ___
    | |    / _ | '__| __| |  _| |/ __/ _` | __/ _ / __|
    | |___|  __| |  | |_| | | | | (_| (_| | ||  __\__ \
     \_____\___|_|   \__|_|_| |_|\___\__,_|\__\___|___/


    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=Certificates -->

  <Target Name="DeployCertificates"
          DependsOnTargets="BuildCertificatesQualified"
          Outputs="%(CertificatesQualified.Identity)"
          Condition=" '$(IncludeCertificates)' == 'true' and '@(Certificates)' != '' ">
    <Message Text="Deploying certificate %(CertificatesQualified.Identity)..." />

    <PropertyGroup Condition=" '@(CertificatesQualified)' != '' ">
      <_Location>$([System.String]::Copy(&quot;%(CertificatesQualified.Store)&quot;).Split('\\')[0])</_Location>
      <_MachineStore Condition=" '$(_Location)' != 'LOCAL_MACHINE' ">false</_MachineStore>
      <_MachineStore Condition=" '$(_Location)' == 'LOCAL_MACHINE' ">true</_MachineStore>
      <_StoreName>$([System.String]::Copy(&quot;%(CertificatesQualified.Store)&quot;).Split('\\')[1])</_StoreName>
    </PropertyGroup>

    <ItemGroup>
      <_Administrators Include="%(CertificatesQualified.Administrators)" />
      <_Users Include="%(CertificatesQualified.Users)" />
    </ItemGroup>

    <MSBuild.ExtensionPack.Security.Certificate
      Condition=" '@(CertificatesQualified)' != '' "
      TaskAction="Add"
      FileName="%(CertificatesQualified.LocationPath)\%(CertificatesQualified.Identity)"
      CertPassword="%(CertificatesQualified.Password)"
      Exportable="true"
      MachineStore="$(_MachineStore)"
      StoreName="$(_StoreName)">
      <Output TaskParameter="SubjectDName" PropertyName="_SubjectDistinguishedName"/>
      <Output TaskParameter="Thumbprint" PropertyName="_Thumbprint"/>
    </MSBuild.ExtensionPack.Security.Certificate>

    <!--
      SetUserRights TaskAction cannot find a certificate by the SubjectDName returned by Add TaskAction, see https://github.com/mikefourie/MSBuildExtensionPack/issues/15
      hence cannot use SubjectDName="%(CertificatesQualified.SubjectDistinguishedName)" nor SubjectDName="$(SubjectDistinguishedName)", but must use Thumbprint="$(Thumbprint)"
      -->
    <MSBuild.ExtensionPack.Security.Certificate
      TaskAction="SetUserRights"
      AccountName="%(_Administrators.Identity)"
      AccessRights="FullControl"
      MachineStore="$(_MachineStore)"
      Thumbprint="$(_Thumbprint)"
      Condition=" '$(_MachineStore)' == 'true' and '$(_StoreName)' == 'My' " />

    <MSBuild.ExtensionPack.Security.Certificate
      TaskAction="SetUserRights"
      AccountName="%(_Users.Identity)"
      AccessRights="Read"
      MachineStore="$(_MachineStore)"
      Thumbprint="$(_Thumbprint)"
      Condition=" '$(_MachineStore)' == 'true' and '$(_StoreName)' == 'My' " />

    <ItemGroup>
      <_Administrators Remove="@(_Administrators)" />
      <_Users Remove="@(_Users)" />
    </ItemGroup>

    <Message Text="Certificate deployed." />
  </Target>

  <Target Name="UndeployCertificates"
          DependsOnTargets="BuildCertificatesQualified"
          Outputs="%(CertificatesQualified.Identity)"
          Condition=" '$(IncludeCertificates)' == 'true' and '@(Certificates)' != '' ">
    <Message Text="Undeploying certificate %(CertificatesQualified.Identity)..." />

    <PropertyGroup Condition=" '@(CertificatesQualified)' != '' ">
      <_Location>$([System.String]::Copy(&quot;%(CertificatesQualified.Store)&quot;).Split('\\')[0])</_Location>
      <_MachineStore Condition=" '$(_Location)' != 'LOCAL_MACHINE' ">false</_MachineStore>
      <_MachineStore Condition=" '$(_Location)' == 'LOCAL_MACHINE' ">true</_MachineStore>
      <_StoreName>$([System.String]::Copy(&quot;%(CertificatesQualified.Store)&quot;).Split('\\')[1])</_StoreName>
    </PropertyGroup>

    <MSBuild.ExtensionPack.Security.Certificate
      Condition=" '@(CertificatesQualified)' != '' "
      TaskAction="Remove"
      MachineStore="$(_MachineStore)"
      StoreName="$(_StoreName)"
      SubjectDName="%(CertificatesQualified.SubjectDistinguishedName)"
      Thumbprint="%(CertificatesQualified.Thumbprint)" />

    <Message Text="Certificate undeployed." />
  </Target>

  <Target Name="BuildCertificatesQualified" Outputs="%(Certificates.Identity)%(Certificates.TargetHosts)" Condition=" '$(IncludeCertificates)' == 'true' and '@(Certificates)' != '' ">
    <!-- filter TargetHosts to keep only those that coincides with the local host -->
    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="FilterItems" InputItems1="$([MSBuild]::Unescape(%(Certificates.TargetHosts)))" Metadata="Identity" RegexPattern="^\*$|^(?i:$(COMPUTERNAME))$">
      <Output TaskParameter="OutputItems" PropertyName="_CoincidingHosts"/>
    </MSBuild.ExtensionPack.Framework.MsBuildHelper>

    <!-- keep only the certificates whose TargetHosts have CoincidingHosts -->
    <ItemGroup Condition=" '$(_CoincidingHosts)' != '' ">
      <CertificatesQualified Include="@(Certificates)" />
    </ItemGroup>
  </Target>

  <Target Name="CopyCertificatesToRedist" Condition=" '$(IncludeCertificates)' == 'true' ">
    <Message Text="Copying certificates to redist folder..." />

    <Copy DestinationFolder="$(RedistDir)"
          SourceFiles="@(Certificates -> '%(LocationPath)\%(Identity)')"
          Condition=" '@(Certificates)' != '' " />

    <Message Text="Copied certificates to redist folder." />
  </Target>

  <!--
      _____                                                  _____                 _  __ _         _____      _   _   _                   ______ _ _
     / ____|                                        ___     / ____|               (_)/ _(_)       / ____|    | | | | (_)                 |  ____(_| |
    | |     ___  _ __ ___  _ __ ___   ___  _ __    ( _ )   | (___  _ __   ___  ___ _| |_ _  ___  | (___   ___| |_| |_ _ _ __   __ _ ___  | |__   _| | ___ ___
    | |    / _ \| '_ ` _ \| '_ ` _ \ / _ \| '_ \   / _ \/\  \___ \| '_ \ / _ \/ __| |  _| |/ __|  \___ \ / _ | __| __| | '_ \ / _` / __| |  __| | | |/ _ / __|
    | |___| (_) | | | | | | | | | | | (_) | | | | | (_>  <  ____) | |_) |  __| (__| | | | | (__   ____) |  __| |_| |_| | | | | (_| \__ \ | |    | | |  __\__ \
     \_____\___/|_| |_| |_|_| |_| |_|\___/|_| |_|  \___/\/ |_____/| .__/ \___|\___|_|_| |_|\___| |_____/ \___|\__|\__|_|_| |_|\__, |___/ |_|    |_|_|\___|___/
                                                                  | |                                                          __/ |
                                                                  |_|                                                         |___/
    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=Common%20%26%20Specific%20Settings%20Files -->

  <!-- BizTalk Deployment Framework targets' overrides to handle both common and specific XML settings files -->

  <Target Name="ExportSettings" DependsOnTargets="CustomPreExportSettings" Condition=" '$(SkipExportSettings)' != 'true' ">
    <Message Text="Exporting settings from environment settings files..." />

    <!-- override to support settings export from both common and specific spreadsheet settings files -->
    <Exec Command="&quot;$(DeployTools)\EnvironmentSettingsExporter.exe&quot; &quot;$(CommonSettingsSpreadsheetPath)&quot; &quot;$(CommonSettingsFilesExportPath)&quot;"
          Condition="Exists('$(CommonSettingsSpreadsheetPath)')"
          ContinueOnError="false" />
    <Exec Command="&quot;$(DeployTools)\EnvironmentSettingsExporter.exe&quot; &quot;$(SettingsSpreadsheetPath)&quot; &quot;$(SettingsFilesExportPath)&quot;"
          Condition="Exists('$(SettingsSpreadsheetPath)')"
          ContinueOnError="false" />

    <Message Text="Exported settings from environment settings files." />
  </Target>

  <Target Name="InitSettingsFilePath" DependsOnTargets="ExportSettings" Condition=" '$(SettingsFilePath)' == '' ">
    <Message Text="Initializing settings file paths..." />

    <!-- override to initialize SettingsFilePath to point to both setting files in order to fool XmlPreprocess.exe as its /s argument can be a semi-colon separated list of files -->
    <PropertyGroup>
      <SettingsFilePath Condition="Exists('$(CommonSettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')"
        >$(CommonSettingsFilesExportPath)\$(TargetEnvironment)_settings.xml</SettingsFilePath>
      <SettingsFilePath Condition=" '$(SettingsFilePath)' != '' "
        >$(SettingsFilePath);</SettingsFilePath>
      <SettingsFilePath Condition="Exists('$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')"
        >$(SettingsFilePath)$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml</SettingsFilePath>
    </PropertyGroup>

    <Message Text="Using common settings file: $(CommonSettingsFilesExportPath)\$(TargetEnvironment)_settings.xml"
             Condition="Exists('$(CommonSettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')" />
    <Message Text="Using application-specific settings file: $(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml"
             Condition="Exists('$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')" />

    <Message Text="Initialized settings file paths." />
  </Target>

  <Target Name="SetCommonPropertiesFromEnvironmentSettings" DependsOnTargets="InitSettingsFilePath" Condition=" '@(CommonPropsFromEnvSettings)' != '' ">
    <Message Text="Setting common properties from common environment settings file '$(CommonSettingsFilesExportPath)\$(TargetEnvironment)_settings.xml'."
             Condition="Exists('$(CommonSettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')" />

    <SetPropFromEnvSetting
      SettingsFilePath="$(CommonSettingsFilesExportPath)\$(TargetEnvironment)_settings.xml"
      XPath="/settings/property[@name='@(CommonPropsFromEnvSettings)']"
      PropertyName="@(CommonPropsFromEnvSettings)"
      Identity="%(Identity)"
      Condition="Exists('$(CommonSettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')">
      <Output TaskParameter="Value" PropertyName="@(CommonPropsFromEnvSettings)" />
    </SetPropFromEnvSetting>

    <GetPropsFromEnvSettingsDelimited
      SettingsFilePath="$(CommonSettingsFilesExportPath)\$(TargetEnvironment)_settings.xml"
      XPathTemplate="/settings/property[@name='@@NAME@@']"
      PropertyNames="@(CommonPropsFromEnvSettings)"
      Condition="Exists('$(CommonSettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')">
      <Output TaskParameter="Value" PropertyName="CommonPropsFromEnvSettingsDelimited" />
    </GetPropsFromEnvSettingsDelimited>

    <Message Text="Set common properties from environment settings."
             Condition="Exists('$(CommonSettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')" />
  </Target>

  <Target Name="SetSpecificPropertiesFromEnvironmentSettings" DependsOnTargets="InitSettingsFilePath" Condition=" '@(PropsFromEnvSettings)' != '' ">
    <Message Text="Setting application-specific properties from application-specific environment settings file '$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml'."
             Condition="Exists('$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')" />

    <SetPropFromEnvSetting
      SettingsFilePath="$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml"
      XPath="/settings/property[@name='@(PropsFromEnvSettings)']"
      PropertyName="@(PropsFromEnvSettings)"
      Identity="%(Identity)"
      Condition="Exists('$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')">
      <Output TaskParameter="Value" PropertyName="@(PropsFromEnvSettings)" />
    </SetPropFromEnvSetting>

    <GetPropsFromEnvSettingsDelimited
      SettingsFilePath="$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml"
      XPathTemplate="/settings/property[@name='@@NAME@@']"
      PropertyNames="@(PropsFromEnvSettings)"
      Condition="Exists('$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')">
      <Output TaskParameter="Value" PropertyName="PropsFromEnvSettingsDelimited" />
    </GetPropsFromEnvSettingsDelimited>

    <Message Text="Set application-specific properties from environment settings."
             Condition="Exists('$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')" />
  </Target>

  <Target Name="SetPropertiesFromEnvironmentSettings" DependsOnTargets="SetCommonPropertiesFromEnvironmentSettings;SetSpecificPropertiesFromEnvironmentSettings" Condition=" '$(LoadedPropsFromEnvSettings)' != 'true' ">
    <!-- override to set both common and application-specific properties from both common and application-specific environment setting files -->
    <!-- make sure to also pass CommonPropsFromEnvSettingsDelimited along with PropsFromEnvSettingsDelimited to nested call to msbuild -->
    <PropertyGroup>
      <PropsFromEnvSettingsDelimited>$(CommonPropsFromEnvSettingsDelimited);$(PropsFromEnvSettingsDelimited)</PropsFromEnvSettingsDelimited>
    </PropertyGroup>
  </Target>

  <Target Name="_DeploySSO" DependsOnTargets="$(_DeploySSODependsOn)" Condition=" '$(IncludeSSO)' == 'true' ">
    <Message Text="Deploying application-specific SSO settings..." />

    <!-- override to create affiliate app and only import application-specific settings file into SSO; common settings are not imported -->
    <Exec
      Command="&quot;$(DeployTools)\SSOSettingsFileImport.exe&quot; &quot;$(BizTalkAppName)&quot; /settingsFile:&quot;$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml&quot; /userGroupName:&quot;$(SsoAppUserGroup)&quot; /adminGroupName:&quot;$(SsoAppAdminGroup)&quot;"
      Condition="Exists('$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml')" />
    <CallTarget Targets="CustomSSO" />
    <!-- make sure we can always access our project (and install path) at run time -->
    <UpdateSSOConfigItem BizTalkAppName="$(BizTalkAppName)" SSOItemName="ProjectPath" SSOItemValue="$(MSBuildProjectDirectoryParent)" />
    <UpdateSSOConfigItem BizTalkAppName="$(BizTalkAppName)" SSOItemName="SourceSettingsFile" SSOItemValue="$(SettingsFilesExportPath)\$(TargetEnvironment)_settings.xml" />

    <Message Text="Deployed application-specific SSO settings." />
  </Target>

  <Target Name="CopySettingsSpreadsheetToRedist" Condition=" '$(IncludeSettingsSpreadsheetInMsi)' == 'true' ">
    <!-- override to copy both common and specific spreadsheet settings files to redist folder and keep common and specific file names as well -->
    <Message Text="Copying XML settings files to redist folder..." />

    <Copy SourceFiles="$(CommonSettingsSpreadsheetPath)"
          DestinationFiles="$(RedistDir)\Deployment\EnvironmentSettings\Common.SettingsFileGenerator.xml"
          Condition="Exists('$(CommonSettingsSpreadsheetPath)')" />
    <Copy SourceFiles="$(SettingsSpreadsheetPath)"
          DestinationFiles="$(RedistDir)\Deployment\EnvironmentSettings\$(ProjectName).SettingsFileGenerator.xml"
          Condition="Exists('$(SettingsSpreadsheetPath)')" />

    <Message Text="Copied XML settings files to redist folder." />
  </Target>

  <!--
      _____             __ _         ______ _ _
     / ____|           / _(_)       |  ____(_| |
    | |     ___  _ __ | |_ _  __ _  | |__   _| | ___ ___
    | |    / _ \| '_ \|  _| |/ _` | |  __| | | |/ _ / __|
    | |___| (_) | | | | | | | (_| | | |    | | |  __\__ \
     \_____\___/|_| |_|_| |_|\__, | |_|    |_|_|\___|___/
                              __/ |
                             |___/
    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=Config%20Files -->

  <Target Name="ApplyConfigFilesCustomizations" Outputs="%(ConfigFiles.LocationPath)" Condition=" '$(IncludeConfigFiles)' == 'true' and '@(ConfigurationElementsToAdd);@(ConfigurationAttributesToAdd)' != '' ">
    <Message Text="Applying configuration files customizations to '%(ConfigFiles.LocationPath)'..." />

    <PropertyGroup>
      <_ConfigFileName>%(ConfigFiles.Identity)</_ConfigFileName>
      <_ConfigFilePath>%(ConfigFiles.LocationPath)</_ConfigFilePath>
    </PropertyGroup>

    <!-- enact ConfigurationElementsToAdd -->
    <MSBuild.ExtensionPack.Xml.XmlFile
      TaskAction="AddElement"
      File="$(_ConfigFilePath)"
      Key="%(ConfigurationElementsToAdd.KeyAttributeName)"
      Value="%(ConfigurationElementsToAdd.KeyAttributeValue)"
      ParentElement="%(ConfigurationElementsToAdd.ParentElement)"
      Element="%(ConfigurationElementsToAdd.Name)"
      XPath="%(ConfigurationElementsToAdd.XPath)"
      InsertBeforeXPath="%(ConfigurationElementsToAdd.InsertBeforeXPath)"
      Condition=" '%(ConfigurationElementsToAdd.ConfigFile)' == '$(_ConfigFileName)' "/>
    <!-- enact ConfigurationAttributesToAdd -->
    <MSBuild.ExtensionPack.Xml.XmlFile
      TaskAction="AddAttribute"
      File="$(_ConfigFilePath)"
      Key="%(ConfigurationAttributesToAdd.Name)"
      Value="%(ConfigurationAttributesToAdd.Value)"
      XPath="%(ConfigurationAttributesToAdd.XPath)"
      Condition=" '%(ConfigurationAttributesToAdd.ConfigFile)' == '$(_ConfigFileName)' "/>

    <Message Text="Applied configuration files customizations to '%(ConfigFiles.LocationPath)'." />
  </Target>

  <Target Name="RevertConfigFilesCustomizations" Outputs="%(ConfigFiles.LocationPath)" Condition=" '$(IncludeConfigFiles)' == 'true' and '@(ConfigurationElementsToDelete)' != '' ">
    <Message Text="Reverting configuration files customizations for '%(ConfigFiles.LocationPath)'..." />

    <PropertyGroup>
      <_ConfigFileName>%(ConfigFiles.Identity)</_ConfigFileName>
      <_ConfigFilePath>%(ConfigFiles.LocationPath)</_ConfigFilePath>
    </PropertyGroup>

    <!-- enact ConfigurationElementsToDelete-->
    <MSBuild.ExtensionPack.Xml.XmlFile
      TaskAction="RemoveElement"
      File="$(_ConfigFilePath)"
      XPath="%(ConfigurationElementsToDelete.XPath)"
      Condition=" '%(ConfigurationElementsToDelete.ConfigFile)' == '$(_ConfigFileName)' "/>

    <Message Text="Reverted configuration files customizations for '%(ConfigFiles.LocationPath)'." />
  </Target>

  <!--
     _____        _        _                                          _    _____           _       _
    |  __ \      | |      | |                                        | |  / ____|         (_)     | |
    | |  | | __ _| |_ __ _| |__   __ _ ___  ___ ___    __ _ _ __   __| | | (___   ___ _ __ _ _ __ | |_ ___
    | |  | |/ _` | __/ _` | '_ \ / _` / __|/ _ / __|  / _` | '_ \ / _` |  \___ \ / __| '__| | '_ \| __/ __|
    | |__| | (_| | || (_| | |_) | (_| \__ |  __\__ \ | (_| | | | | (_| |  ____) | (__| |  | | |_) | |_\__ \
    |_____/ \__,_|\__\__,_|_.__/ \__,_|___/\___|___/  \__,_|_| |_|\__,_| |_____/ \___|_|  |_| .__/ \__|___/
                                                                                            | |
                                                                                            |_|
    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=Databases%20and%20Scripts -->

  <ItemGroup>
    <!-- Automatically include, by conventions, CustomDatabases' database and object creation scripts -->
    <DatabaseDeploymentScripts Include="@(CustomDatabases -> '$(ProjectName).Create%(Identity).sql');@(CustomDatabases -> '$(ProjectName).Create%(Identity)Objects.sql')" />
    <!-- Automatically include, by conventions, CustomDatabases' database drop scripts -->
    <DatabaseUndeploymentScripts Include="@(CustomDatabases -> '$(ProjectName).Drop%(Identity).sql')" />
  </ItemGroup>

  <Target Name="DeployDatabases" Condition=" '$(IncludeDatabases)' == 'true' and '@(DatabaseDeploymentScripts)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Deploying and applying databases customizations..." />

    <ItemGroup>
      <DatabaseDeploymentScriptsQualified Include="@(DatabaseDeploymentScripts -> '%(LocationPath)\%(Identity)')">
        <ConnectionString>Server=%(Server);Initial Catalog=master;Integrated Security=True</ConnectionString>
      </DatabaseDeploymentScriptsQualified>
      <!-- Setup necessary database objects for Backup BizTalk Server job -->
      <DatabaseDeploymentScriptsQualified Include="@(CustomDatabases -> '$(BtsDir)Schema\Backup_Setup_All_Tables.sql');@(CustomDatabases -> '$(BtsDir)Schema\Backup_Setup_All_Procs.sql')">
        <ConnectionString>Server=%(Server);Initial Catalog=%(Identity);Integrated Security=True</ConnectionString>
      </DatabaseDeploymentScriptsQualified>
    </ItemGroup>

    <!-- UseTransaction is false, see http://dba.stackexchange.com/questions/56527/alter-database-statement-not-allowed-within-multi-statement-transaction -->
    <MSBuild.ExtensionPack.SqlServer.SqlExecute
      TaskAction="Execute"
      ConnectionString="@(DatabaseDeploymentScriptsQualified -> '%(ConnectionString)')"
      Files="@(DatabaseDeploymentScriptsQualified)"
      Parameters="@(DatabaseScriptParameters)"
      Retry="false"
      StripMultiLineComments="false"
      UseTransaction="false"
      Condition=" '%(DatabaseDeploymentScriptsQualified.Identity)' == '%(DatabaseDeploymentScriptsQualified.Identity)' and '%(DatabaseDeploymentScriptsQualified.ConnectionString)' == '%(DatabaseDeploymentScriptsQualified.ConnectionString)' "
      ContinueOnError="false" />

    <Message Text="Deployed and applied databases customizations." />
  </Target>

  <Target Name="SetupBizTalkBackupForCustomDatabases" Outputs="%(CustomDatabases.Identity)" Condition=" '$(IncludeDatabases)' == 'true' and '@(CustomDatabases)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Setting up BizTalk backup for custom database '%(CustomDatabases.Identity)'..." Condition=" '%(CustomDatabases.BackupWithBizTalk)' == 'true' " />

    <!-- prepping script parameters and ensure there is always one and only one ${CustomDatabaseName} param -->
    <ItemGroup>
      <DatabaseScriptParameters Include="true" Condition=" '%(CustomDatabases.BackupWithBizTalk)' == 'true' " >
        <name>${CustomDatabaseName}</name>
        <value>%(CustomDatabases.Identity)</value>
      </DatabaseScriptParameters>
    </ItemGroup>

    <MSBuild.ExtensionPack.SqlServer.SqlExecute
      TaskAction="Execute"
      ConnectionString="Server=$(ManagementDatabaseServer);Initial Catalog=%(CustomDatabases.Identity);Integrated Security=True"
      Files="$(DeployTools)\BizTalk.Factory.IncludeCustomDatabaseInOtherBackupDatabases.sql"
      Parameters="@(DatabaseScriptParameters)"
      Retry="false"
      StripMultiLineComments="false"
      UseTransaction="true"
      Condition=" '%(CustomDatabases.BackupWithBizTalk)' == 'true' "
      ContinueOnError="false" />

    <!-- prepping script parameters and ensure there is always one and only one ${CustomDatabaseName} param -->
    <ItemGroup>
      <DatabaseScriptParameters Remove="%(DatabaseScriptParameters.Identity)" Condition=" '%(name)' == '${CustomDatabaseName}' " />
    </ItemGroup>

    <Message Text="Set up BizTalk backup for custom database '%(CustomDatabases.Identity)'." Condition=" '%(CustomDatabases.BackupWithBizTalk)' == 'true' " />
  </Target>

  <Target Name="UndeployDatabases" Condition=" '$(IncludeDatabases)' == 'true' and '@(DatabaseUndeploymentScripts)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Undeploying and reverting databases customizations..." />

    <ItemGroup>
      <DatabaseUndeploymentScriptsQualified Include="@(DatabaseUndeploymentScripts -> '%(LocationPath)\%(Identity)')" Condition=" '%(Identity)' == '%(Identity)' ">
        <ConnectionString>Server=%(Server);Initial Catalog=master;Integrated Security=True</ConnectionString>
      </DatabaseUndeploymentScriptsQualified>
    </ItemGroup>

    <!-- UseTransaction is false, see http://dba.stackexchange.com/questions/56527/alter-database-statement-not-allowed-within-multi-statement-transaction -->
    <MSBuild.ExtensionPack.SqlServer.SqlExecute
      TaskAction="Execute"
      ConnectionString="@(DatabaseUndeploymentScriptsQualified -> '%(ConnectionString)')"
      Files="@(DatabaseUndeploymentScriptsQualified)"
      Parameters="@(DatabaseScriptParameters)"
      Retry="false"
      StripMultiLineComments="false"
      UseTransaction="false"
      Condition=" '%(DatabaseUndeploymentScriptsQualified.Identity)' == '%(DatabaseUndeploymentScriptsQualified.Identity)' and '%(DatabaseUndeploymentScriptsQualified.ConnectionString)' == '%(DatabaseUndeploymentScriptsQualified.ConnectionString)' "
      ContinueOnError="false" />

    <Message Text="Undeployed and reverted databases customizations." />
  </Target>

  <Target Name="TeardownBizTalkBackupForCustomDatabases" Outputs="%(CustomDatabases.Identity)" Condition=" '$(IncludeDatabases)' == 'true' and '@(CustomDatabases)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Tearing down BizTalk backup for custom database '%(CustomDatabases.Identity)'..." Condition=" '%(CustomDatabases.BackupWithBizTalk)' == 'true' " />

    <!-- prepping script parameters and ensure there is always one and only one ${CustomDatabaseName} param -->
    <ItemGroup>
      <DatabaseScriptParameters Remove="%(DatabaseScriptParameters.Identity)" Condition=" '%(name)' == '${CustomDatabaseName}' " />
      <DatabaseScriptParameters Include="true" Condition=" '%(CustomDatabases.BackupWithBizTalk)' == 'true' " >
        <name>${CustomDatabaseName}</name>
        <value>%(CustomDatabases.Identity)</value>
      </DatabaseScriptParameters>
    </ItemGroup>

    <MSBuild.ExtensionPack.SqlServer.SqlExecute
      TaskAction="Execute"
      ConnectionString="Server=$(ManagementDatabaseServer);Initial Catalog=%(CustomDatabases.Identity);Integrated Security=True"
      Files="$(DeployTools)\BizTalk.Factory.RemoveCustomDatabaseFromOtherBackupDatabases.sql"
      Parameters="@(DatabaseScriptParameters)"
      Retry="false"
      StripMultiLineComments="false"
      UseTransaction="true"
      Condition=" '%(CustomDatabases.BackupWithBizTalk)' == 'true' "
      ContinueOnError="false" />

    <Message Text="Torn down BizTalk backup for custom database '%(CustomDatabases.Identity)'." Condition=" '%(CustomDatabases.BackupWithBizTalk)' == 'true' " />
  </Target>

  <Target Name="CopyDatabaseDeploymentScriptsToRedist" Condition=" '$(IncludeDatabases)' == 'true' ">
    <Message Text="Copying database deployment script files to redist folder..." />

    <Copy DestinationFolder="$(RedistDir)"
          SourceFiles="@(DatabaseDeploymentScripts -> '%(LocationPath)\%(Identity)')"
          Condition=" '@(DatabaseDeploymentScripts)' != '' " />
    <Copy DestinationFolder="$(RedistDir)"
          SourceFiles="@(DatabaseUndeploymentScripts -> '%(LocationPath)\%(Identity)')"
          Condition=" '@(DatabaseUndeploymentScripts)' != '' " />

    <Message Text="Copied database deployment script files to redist folder." />
  </Target>

  <!--
     _____  _               _             _                     ______ _ _
    |  __ \(_)             | |           (_)            ___    |  ____(_| |
    | |  | |_ _ __ ___  ___| |_ ___  _ __ _  ___ ___   ( _ )   | |__   _| | ___ ___
    | |  | | | '__/ _ \/ __| __/ _ \| '__| |/ _ / __|  / _ \/\ |  __| | | |/ _ / __|
    | |__| | | | |  __| (__| || (_) | |  | |  __\__ \ | (_>  < | |    | | |  __\__ \
    |_____/|_|_|  \___|\___|\__\___/|_|  |_|\___|___/  \___/\/ |_|    |_|_|\___|___/


    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=Directories%20%26%20Files -->

  <PropertyGroup>
    <CreateAndSecureDirectoriesAndFilesDependsOn>
      CreateLocalDirectories;
      CreateNetworkDirectories;
      BuildLocalDirectoryAcls;
      BuildNetworkDirectoryAcls;
      BuildLocalFileAcls;
      BuildNetworkFileAcls;
      ApplyAcls
    </CreateAndSecureDirectoriesAndFilesDependsOn>
  </PropertyGroup>
  <Target Name="CreateAndSecureDirectoriesAndFiles" DependsOnTargets="$(CreateAndSecureDirectoriesAndFilesDependsOn)" Condition=" '$(IncludeDirectoriesAndFiles)' == 'true' " />

  <Target Name="CreateLocalDirectories" Condition=" '@(LocalDirectories)' != '' ">
    <Message Text="Creating local directories..." />

    <MakeDir Directories="%(LocalDirectories.Identity)" Condition=" '%(LocalDirectories.Create)' == 'true' and !Exists('%(Identity)') " />

    <Message Text="Created local directories." />
  </Target>

  <Target Name="CreateNetworkDirectories" Condition=" '@(NetworkDirectories)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Creating network directories..." />

    <MakeDir Directories="%(NetworkDirectories.Identity)" Condition=" '%(NetworkDirectories.Create)' == 'true' and !Exists('%(Identity)') " />

    <Message Text="Created network directories." />
  </Target>

  <Target Name="BuildLocalDirectoryAcls" Condition=" '@(LocalDirectories)' != '' ">
    <Message Text="Building ACLs for local directories..." />

    <ItemGroup>
      <AclsQualified Include="%(LocalDirectories.Users)" Condition=" '%(Identity)' == '%(Identity)' ">
        <LocationPath>%(Identity)</LocationPath>
        <Permissions>%(Permissions)</Permissions>
        <Grant>%(Grant)</Grant>
        <Inheritance Condition=" '%(LocalDirectories.Inheritance)' == '' ">default</Inheritance>
        <Inheritance Condition=" '%(LocalDirectories.Inheritance)' != '' ">%(LocalDirectories.Inheritance)</Inheritance>
        <Recurse Condition=" '%(LocalDirectories.Recurse)' == '' ">false</Recurse>
        <Recurse Condition=" '%(LocalDirectories.Recurse)' != '' ">%(LocalDirectories.Recurse)</Recurse>
      </AclsQualified>
    </ItemGroup>

    <Message Text="Built ACLs for local directories." />
  </Target>

  <Target Name="BuildNetworkDirectoryAcls" Condition=" '@(NetworkDirectories)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Building ACLs for network directories..." />

    <ItemGroup>
      <AclsQualified Include="%(NetworkDirectories.Users)" Condition=" '%(Identity)' == '%(Identity)' ">
        <LocationPath>%(Identity)</LocationPath>
        <Permissions>%(Permissions)</Permissions>
        <Grant>%(Grant)</Grant>
        <Inheritance Condition=" '%(NetworkDirectories.Inheritance)' == '' ">default</Inheritance>
        <Inheritance Condition=" '%(NetworkDirectories.Inheritance)' != '' ">%(NetworkDirectories.Inheritance)</Inheritance>
        <Recurse Condition=" '%(NetworkDirectories.Recurse)' == '' ">false</Recurse>
        <Recurse Condition=" '%(NetworkDirectories.Recurse)' != '' ">%(NetworkDirectories.Recurse)</Recurse>
      </AclsQualified>
    </ItemGroup>

    <Message Text="Built ACLs for network directories." />
  </Target>

  <Target Name="BuildLocalFileAcls" Condition=" '@(LocalFiles)' != '' ">
    <Message Text="Building ACLs for local files..." />

    <ItemGroup>
      <AclsQualified Include="%(LocalFiles.Users)" Condition=" '%(Identity)' == '%(Identity)' ">
        <LocationPath>%(Identity)</LocationPath>
        <Permissions>%(Permissions)</Permissions>
        <Grant>%(Grant)</Grant>
        <Inheritance Condition=" '%(LocalFiles.Inheritance)' == '' ">default</Inheritance>
        <Inheritance Condition=" '%(LocalFiles.Inheritance)' != '' ">%(LocalFiles.Inheritance)</Inheritance>
        <Recurse Condition=" '%(LocalFiles.Recurse)' == '' ">false</Recurse>
        <Recurse Condition=" '%(LocalFiles.Recurse)' != '' ">%(LocalFiles.Recurse)</Recurse>
      </AclsQualified>
    </ItemGroup>

    <Message Text="Built ACLs for local files." />
  </Target>

  <Target Name="BuildNetworkFileAcls" Condition=" '@(NetworkFiles)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Building ACLs for network files..." />

    <ItemGroup>
      <AclsQualified Include="%(NetworkFiles.Users)" Condition=" '%(Identity)' == '%(Identity)' ">
        <LocationPath>%(Identity)</LocationPath>
        <Permissions>%(Permissions)</Permissions>
        <Grant>%(Grant)</Grant>
        <Inheritance Condition=" '%(NetworkFiles.Inheritance)' == '' ">default</Inheritance>
        <Inheritance Condition=" '%(NetworkFiles.Inheritance)' != '' ">%(NetworkFiles.Inheritance)</Inheritance>
        <Recurse Condition=" '%(NetworkFiles.Recurse)' == 'true' ">true</Recurse>
        <Recurse Condition=" '%(NetworkFiles.Recurse)' != 'true' ">false</Recurse>
      </AclsQualified>
    </ItemGroup>

    <Message Text="Built ACLs for network files." />
  </Target>

  <Target Name="ApplyAcls" Condition=" '@(AclsQualified)' != '' " Outputs="%(AclsQualified.LocationPath)%(AclsQualified.Grant);%(AclsQualified.Inheritance);%(AclsQualified.Recurse)">
    <Message Text="Applying ACLs..." />

    <PropertyGroup>
      <CommandText>icacls.exe &quot;%(AclsQualified.LocationPath)&quot;</CommandText>
      <CommandText Condition=" '%(AclsQualified.Grant)' == 'Add'     ">$(CommandText) /grant</CommandText>
      <CommandText Condition=" '%(AclsQualified.Grant)' == 'Replace' ">$(CommandText) /grant:r</CommandText>
      <!-- To delimit each item by using a character other than a semicolon, use the syntax @(myType, 'separator'); see http://msdn.microsoft.com/en-us/library/vstudio/ms164283.aspx -->
      <CommandText>$(CommandText) @(AclsQualified -> '&quot;%(Identity)&quot;:%(Permissions)', ' ')</CommandText>
      <CommandText Condition=" '%(AclsQualified.Recurse)' == 'true'     ">$(CommandText) /T</CommandText>
      <CommandText Condition=" '%(AclsQualified.Inheritance)' == 'Revoke' ">$(CommandText) /inheritance:r</CommandText>
    </PropertyGroup>

    <Message Text="$(CommandText)" Condition="Exists('%(AclsQualified.LocationPath)')" Importance="Low" />
    <Exec Command="$(CommandText)" Condition="Exists('%(AclsQualified.LocationPath)')" />

    <Message Text="Applied ACLs." />
  </Target>

  <!--
     _____   _____ _          ____                     _   _____      _ _      _
    |  __ \ / ____| |        |  _ \                   | | |  __ \    | (_)    (_)
    | |  | | (___ | |  ______| |_) | __ _ ___  ___  __| | | |__) ___ | |_  ___ _  ___ ___
    | |  | |\___ \| | |______|  _ < / _` / __|/ _ \/ _` | |  ___/ _ \| | |/ __| |/ _ / __|
    | |__| |____) | |____    | |_) | (_| \__ |  __| (_| | | |  | (_) | | | (__| |  __\__ \
    |_____/|_____/|______|   |____/ \__,_|___/\___|\__,_| |_|   \___/|_|_|\___|_|\___|___/


    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=DSL-Based%20Policies -->

  <ItemGroup >
    <PoliciesQualified Condition=" '$(Configuration)' != 'Server' " Include=" @(Policies -> '%(LocationPath)\%(Identity)') " />
    <PoliciesQualified Condition=" '$(Configuration)' == 'Server' " Include=" @(Policies -> '..\%(Identity)') " />
  </ItemGroup>

  <Target Name="DeployPolicies" Condition=" '$(IncludePolicies)' == 'true' and '@(Policies)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Deploying DSL-based policies..." />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /ShowCallStack /Server=$(ManagementDatabaseServer) &quot;@(PoliciesQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' " />

    <Message Text="Deployed DSL-based policies." />
  </Target>

  <Target Name="UndeployPolicies" Condition=" '$(IncludePolicies)' == 'true' and '@(Policies)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Undeploying DSL-based policies..." />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /u /ShowCallStack /Server=$(ManagementDatabaseServer) &quot;@(PoliciesQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' " />

    <Message Text="Undeployed DSL-based policies." />
  </Target>

  <Target Name="ConfigureRuleEngineStaticSupport" BeforeTargets="DeployPolicies" Condition=" '$(IncludePolicies)' == 'true' and '@(Policies)' != '' ">
    <Message Text="Activating rule engine's static support..." />

    <!-- always make sure rule engine's static support is activated as it is required by BizTalk Factory's DSL-based policies -->
    <MSBuild.ExtensionPack.Computer.Registry
      TaskAction="Set"
      RegistryHive="LocalMachine"
      Key="SOFTWARE\Microsoft\BusinessRules\3.0"
      Value="StaticSupport"
      Data="1"
      DataType="DWord"
      Condition=" '$(Is64bitOS)' != 'true' " />
    <MSBuild.ExtensionPack.Computer.Registry
      TaskAction="Set"
      RegistryHive="LocalMachine"
      Key="SOFTWARE\Wow6432Node\Microsoft\BusinessRules\3.0"
      Value="StaticSupport"
      Data="1"
      DataType="DWord"
      Condition=" '$(Is64bitOS)' == 'true' " />

    <Message Text="Activated rule engine's static support." />
  </Target>

  <Target Name="CopyPoliciesToRedist" Condition=" '$(IncludePolicies)' == 'true' and '@(Policies)' != '' ">
    <Message Text="Copying DSL-based policy assemblies to redist folder..." />

    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(PoliciesQualified)" Condition=" '@(Policies)' != '' " />

    <Message Text="Copied DSL-based policy assemblies to redist folder." />
  </Target>

  <!--
     ______ _                  _                          _ _           _   _               ____  _           _ _
    |  ____| |                | |       /\               | (_)         | | (_)             |  _ \(_)         | (_)
    | |__  | |_   _  ___ _ __ | |_     /  \   _ __  _ __ | |_  ___ __ _| |_ _  ___  _ __   | |_) |_ _ __   __| |_ _ __   __ _ ___
    |  __| | | | | |/ _ | '_ \| __|   / /\ \ | '_ \| '_ \| | |/ __/ _` | __| |/ _ \| '_ \  |  _ <| | '_ \ / _` | | '_ \ / _` / __|
    | |    | | |_| |  __| | | | |_   / ____ \| |_) | |_) | | | (_| (_| | |_| | (_) | | | | | |_) | | | | | (_| | | | | | (_| \__ \
    |_|    |_|\__,_|\___|_| |_|\__| /_/    \_| .__/| .__/|_|_|\___\__,_|\__|_|\___/|_| |_| |____/|_|_| |_|\__,_|_|_| |_|\__, |___/
                                             | |   | |                                                                   __/ |
                                             |_|   |_|                                                                  |___/
    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=Fluent%20Application%20Bindings -->

  <ItemGroup >
    <ApplicationBindingsQualified Condition=" '$(Configuration)' != 'Server' " Include=" @(ApplicationBindings -> '%(LocationPath)\%(Identity)') ">
      <BindingFilePath>%(LocationPath)\%(Filename).xml</BindingFilePath>
    </ApplicationBindingsQualified>
    <ApplicationBindingsQualified Condition=" '$(Configuration)' == 'Server' " Include=" @(ApplicationBindings -> '..\%(Identity)') ">
      <BindingFilePath>.\%(Filename).xml</BindingFilePath>
    </ApplicationBindingsQualified>
  </ItemGroup>

  <Target Name="DeployFluentApplicationBindings"
          Condition=" '$(IncludeFluentApplicationBindings)' == 'true' and '@(ApplicationBindings)' != '' "
          DependsOnTargets="GenerateApplicationBindings;ImportApplicationBindings;DeployFluentFileAdapterPhysicalPaths;InitializeBizTalkServices;InitializeApplicationViaBizTalk">
  </Target>

  <Target Name="UndeployFluentApplicationBindings"
          Condition=" '$(IncludeFluentApplicationBindings)' == 'true' and '@(ApplicationBindings)' != '' "
          DependsOnTargets="UndeployFluentFileAdapterPhysicalPaths">
  </Target>

  <Target Name="GenerateApplicationBindings"
          Condition=" '$(IncludeFluentApplicationBindings)' == 'true' and '@(ApplicationBindings)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Generating XML port bindings from fluent DSL-based bindings..." />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /ShowCallStack /TargetEnvironment=$(TargetEnvironment) /BindingFilePath=&quot;%(BindingFilePath)&quot; /EnvironmentSettingOverridesRootPath=&quot;$(EnvironmentSettingOverridesRootPath)&quot; &quot;@(ApplicationBindingsQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' " />

    <Message Text="Generated XML port bindings from fluent DSL-based bindings." />
  </Target>

  <Target Name="ImportApplicationBindings"
          Condition=" '$(IncludeFluentApplicationBindings)' == 'true' and '@(ApplicationBindings)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' ">
    <Message Text="Importing XML port bindings generated from fluent DSL-based bindings..." />

    <Exec Command="BTSTask.exe ImportBindings -Source:&quot;@(ApplicationBindingsQualified -> '%(BindingFilePath)')&quot; -ApplicationName:&quot;$(BizTalkAppName)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' " />

    <Message Text="Imported XML port bindings generated from fluent DSL-based bindings." />
  </Target>

  <Target Name="DeployFluentFileAdapterPhysicalPaths"
          Condition=" '$(IncludeFluentApplicationBindings)' == 'true' and '@(ApplicationBindings)' != '' and '$(ManageFileAdapterPhysicalPaths)' == 'true' ">
    <Message Text="Deploying fluent file adapters' physical paths..." />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /ShowCallStack /TargetEnvironment=$(TargetEnvironment) /SetupFileAdapterPaths /Users=&quot;BUILTIN\Users&quot; /EnvironmentSettingOverridesRootPath=&quot;$(EnvironmentSettingOverridesRootPath)&quot; &quot;@(ApplicationBindingsQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' and '$(Configuration)' != 'Server' " />

    <Message Text="The BTSACCOUNT environment variable must be set up for automatic configuration of permissions for file adapter physical paths."
             Condition=" '%(ApplicationBindingsQualified.Identity)' == '%(ApplicationBindingsQualified.Identity)' and '$(Configuration)' == 'Server' and '$(BTSACCOUNT)' == ''" />
    <Exec Command="$(FrameworkDir)\InstallUtil.exe /ShowCallStack /TargetEnvironment=$(TargetEnvironment) /SetupFileAdapterPaths /Users=&quot;$(BTSACCOUNT)&quot; /EnvironmentSettingOverridesRootPath=&quot;$(EnvironmentSettingOverridesRootPath)&quot; &quot;@(ApplicationBindingsQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' and '$(Configuration)' == 'Server' " />

    <Message Text="Deployed fluent file adapters' physical paths." />
  </Target>

  <Target Name="InitializeBizTalkServices"
          Condition=" '$(IncludeFluentApplicationBindings)' == 'true' and '@(ApplicationBindings)' != '' and '$(DeployBizTalkMgmtDB)' == 'true' and '$(ControlBizTalkServicesState)' == 'true' ">
    <Message Text="Initializing BizTalk Server services..." />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /ShowCallStack /TargetEnvironment=$(TargetEnvironment) /InitializeServices /EnvironmentSettingOverridesRootPath=&quot;$(EnvironmentSettingOverridesRootPath)&quot; &quot;@(ApplicationBindingsQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' " />

    <Message Text="Initialized BizTalk Server services." />
  </Target>

  <!-- override BTDF ability to start BizTalk Server services -->
  <Target Name="StartApplicationViaBizTalk" Condition=" '$(UseLegacyApplicationControl)' == 'true' " DependsOnTargets="InitializeApplicationViaBizTalk"/>

  <Target Name="InitializeApplicationViaBizTalk" Condition=" '$(UseLegacyApplicationControl)' == 'true' and '$(ControlBizTalkServicesState)' == 'false' and '$(ControlBizTalkAppStartOption)' != 'None' ">
    <PropertyGroup>
      <StartApplicationTime>$([System.DateTime]::Now.ToString('MM-dd-yy hh:mm:ss'))</StartApplicationTime>
    </PropertyGroup>
    <Message Text="Starting $(BizTalkAppName) application at $(StartApplicationTime)."/>
    <ControlBizTalkApp ApplicationName="$(BizTalkAppName)" StartOption="$(ControlBizTalkAppStartOption)" />
  </Target>

  <Target Name="UndeployFluentFileAdapterPhysicalPaths"
          Condition=" '$(IncludeFluentApplicationBindings)' == 'true' and '@(ApplicationBindings)' != '' and '$(ManageFileAdapterPhysicalPaths)' == 'true' and '$(DeleteFileAdapterPhysicalPathsOnUndeploy)' != 'Never' ">
    <Message Text="Undeploying fluent file adapters' physical paths..." />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /u /ShowCallStack /TargetEnvironment=$(TargetEnvironment) /TeardownFileAdapterPaths &quot;@(ApplicationBindingsQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' and '$(DeleteFileAdapterPhysicalPathsOnUndeploy)' == 'DeleteIfEmpty' " />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /u /ShowCallStack /TargetEnvironment=$(TargetEnvironment) /TeardownFileAdapterPaths /Recurse &quot;@(ApplicationBindingsQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' and '$(DeleteFileAdapterPhysicalPathsOnUndeploy)' == 'DeleteRecursive' " />

    <Message Text="Undeployed fluent file adapters' physical paths." />
  </Target>

  <Target Name="CopyApplicationBindingsToRedist" Condition=" '$(IncludeFluentApplicationBindings)' == 'true' and '@(ApplicationBindings)' != '' ">
    <Message Text="Copying fluent DSL-based binding assemblies to redist folder..." />

    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(ApplicationBindingsQualified)" Condition=" '@(ApplicationBindings)' != '' " />
    <Copy SourceFiles="@(ApplicationBindings -> '%(LocationPath)\%(Filename).pdb')"
          DestinationFiles="@(ApplicationBindings -> '$(RedistDir)\%(Filename).pdb')"
          Condition="Exists('%(LocationPath)\%(Filename).pdb')"
          ContinueOnError="true" />

    <Message Text="Copyied fluent DSL-based binding assemblies to redist folder." />
  </Target>

  <!--
     __  __  _____ __  __  ____     ____
    |  \/  |/ ____|  \/  |/ __ \   / __ \
    | \  / | (___ | \  / | |  | | | |  | |_   _  ___ _   _  ___ ___
    | |\/| |\___ \| |\/| | |  | | | |  | | | | |/ _ | | | |/ _ / __|
    | |  | |____) | |  | | |__| | | |__| | |_| |  __| |_| |  __\__ \
    |_|  |_|_____/|_|  |_|\___\_\  \___\_\\__,_|\___|\__,_|\___|___/


    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=MSMQ%20Queues -->

  <Target Name="CreateMsmqQueues"
          Condition=" '$(IncludeMsmqQueues)' == 'true' and '@(MsmqReceiveQueues);@(MsmqDeadLetterQueues)' != '' "
          DependsOnTargets="CreateMsmqReceiveQueues;CreateMsmqDeadLetterQueues">
  </Target>

  <Target Name="CreateMsmqReceiveQueues"
          Condition=" '$(IncludeMsmqQueues)' == 'true' and '@(MsmqReceiveQueues)' != '' "
          Outputs="%(MsmqReceiveQueues.Identity)">

    <!-- filter TargetHosts to keep only those that coincides with the local host -->
    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="FilterItems" InputItems1="%(MsmqReceiveQueues.TargetHosts)" Metadata="Identity" RegexPattern="^(?i:$(COMPUTERNAME))$">
      <Output TaskParameter="OutputItems" PropertyName="_CoincidingHosts"/>
    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
    <!-- keep only the queues whose TargetHosts have CoincidingHosts -->
    <Message Text="Creating queue '.\private$\%(MsmqReceiveQueues.Identity)'..." Condition=" '$(_CoincidingHosts)' != '' " />

    <ItemGroup Condition=" '$(_CoincidingHosts)' != '' ">
      <_QueuePermissionSet Include="$(BizTalkGroupsDomain)\$(BizTalkServerAdministratorGroup)">
        <Permissions>FullControl</Permissions>
      </_QueuePermissionSet>
      <_QueuePermissionSet Include="$(BizTalkGroupsDomain)\$(BizTalkApplicationUserGroup);$(BizTalkGroupsDomain)\$(BizTalkIsolatedHostUserGroup)">
        <Permissions>DeleteMessage,ReceiveMessage</Permissions>
      </_QueuePermissionSet>
    </ItemGroup>

    <MSBuild.ExtensionPack.Communication.MSMQ
      TaskAction="Create"
      Path=".\private$\%(MsmqReceiveQueues.Identity)"
      Label="%(MsmqReceiveQueues.Description)"
      Force="false"
      Transactional="true"
      Condition=" '$(_CoincidingHosts)' != '' " />
    <MSBuild.ExtensionPack.Communication.MSMQ
      TaskAction="SetPermissions"
      Path=".\private$\%(MsmqReceiveQueues.Identity)"
      Set="@(_QueuePermissionSet)"
      Condition=" '$(_CoincidingHosts)' != '' " />

    <Message Text="Created queue '.\private$\%(MsmqReceiveQueues.Identity)'." Condition=" '$(_CoincidingHosts)' != '' " />
    <ItemGroup>
      <_QueuePermissionSet Remove="@(_QueuePermissionSet)" />
    </ItemGroup>

  </Target>

  <Target Name="CreateMsmqDeadLetterQueues"
          Condition=" '$(IncludeMsmqQueues)' == 'true' and '@(MsmqDeadLetterQueues)' != '' "
          Outputs="%(MsmqDeadLetterQueues.Identity)">

    <!-- filter TargetHosts to keep only those that coincides with the local host -->
    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="FilterItems" InputItems1="%(MsmqDeadLetterQueues.TargetHosts)" Metadata="Identity" RegexPattern="^(?i:$(COMPUTERNAME))$">
      <Output TaskParameter="OutputItems" PropertyName="_CoincidingHosts"/>
    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
    <!-- keep only the queues whose TargetHosts have CoincidingHosts -->
    <Message Text="Creating dead letter queue '.\private$\%(MsmqDeadLetterQueues.Identity)'..." Condition=" '$(_CoincidingHosts)' != '' " />

    <ItemGroup Condition=" '$(_CoincidingHosts)' != '' ">
      <_QueuePermissionSet Include="$(BizTalkGroupsDomain)\$(BizTalkServerAdministratorGroup)">
        <Permissions>FullControl</Permissions>
      </_QueuePermissionSet>
      <_QueuePermissionSet Include="$(BizTalkGroupsDomain)\$(BizTalkApplicationUserGroup);$(BizTalkGroupsDomain)\$(BizTalkIsolatedHostUserGroup)">
        <Permissions>WriteMessage</Permissions>
      </_QueuePermissionSet>
    </ItemGroup>

    <MSBuild.ExtensionPack.Communication.MSMQ
      TaskAction="Create"
      Path=".\private$\%(MsmqDeadLetterQueues.Identity)"
      Label="%(MsmqDeadLetterQueues.Description)"
      Force="false"
      Transactional="true"
      Condition=" '$(_CoincidingHosts)' != '' " />
    <MSBuild.ExtensionPack.Communication.MSMQ
      TaskAction="SetPermissions"
      Path=".\private$\%(MsmqDeadLetterQueues.Identity)"
      Set="@(_QueuePermissionSet)"
      Condition=" '$(_CoincidingHosts)' != '' " />

    <Message Text="Created dead letter queue '.\private$\%(MsmqDeadLetterQueues.Identity)'." Condition=" '$(_CoincidingHosts)' != '' " />
    <ItemGroup>
      <_QueuePermissionSet Remove="@(_QueuePermissionSet)" />
    </ItemGroup>

  </Target>

  <Target Name="DeleteMsmqQueues"
          Condition=" '$(IncludeMsmqQueues)' == 'true' and '@(MsmqReceiveQueues);@(MsmqDeadLetterQueues)' != '' "
          DependsOnTargets="DeleteMsmqReceiveQueues;DeleteMsmqDeadLetterQueues">
  </Target>

  <Target Name="DeleteMsmqReceiveQueues"
          Condition=" '$(IncludeMsmqQueues)' == 'true' and '@(MsmqReceiveQueues)' != '' "
          Outputs="%(MsmqReceiveQueues.Identity)">

    <!-- filter TargetHosts to keep only those that coincides with the local host -->
    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="FilterItems" InputItems1="%(MsmqReceiveQueues.TargetHosts)" Metadata="Identity" RegexPattern="^(?i:$(COMPUTERNAME))$">
      <Output TaskParameter="OutputItems" PropertyName="_CoincidingHosts"/>
    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
    <!-- keep only the queues whose TargetHosts have CoincidingHosts -->
    <Message Text="Deleting queue '.\private$\%(MsmqReceiveQueues.Identity)'..." Condition=" '$(_CoincidingHosts)' != '' " />

    <MSBuild.ExtensionPack.Communication.MSMQ
      TaskAction="Delete"
      Path=".\private$\%(MsmqReceiveQueues.Identity)"
      Condition=" '$(_CoincidingHosts)' != '' "
      ContinueOnError="true" />

    <Message Text="Deleted queue '.\private$\%(MsmqReceiveQueues.Identity)'." Condition=" '$(_CoincidingHosts)' != '' " />

  </Target>

  <Target Name="DeleteMsmqDeadLetterQueues"
          Condition=" '$(IncludeMsmqQueues)' == 'true' and '@(MsmqDeadLetterQueues)' != '' "
          Outputs="%(MsmqDeadLetterQueues.Identity)">

    <!-- filter TargetHosts to keep only those that coincides with the local host -->
    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="FilterItems" InputItems1="%(MsmqDeadLetterQueues.TargetHosts)" Metadata="Identity" RegexPattern="^(?i:$(COMPUTERNAME))$">
      <Output TaskParameter="OutputItems" PropertyName="_CoincidingHosts"/>
    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
    <!-- keep only the queues whose TargetHosts have CoincidingHosts -->
    <Message Text="Deleting dead letter queue '.\private$\%(MsmqDeadLetterQueues.Identity)'..." Condition=" '$(_CoincidingHosts)' != '' " />

    <MSBuild.ExtensionPack.Communication.MSMQ
      TaskAction="Delete"
      Path=".\private$\%(MsmqDeadLetterQueues.Identity)"
      Condition=" '$(_CoincidingHosts)' != '' "
      ContinueOnError="true" />

    <Message Text="Deleted dead letter queue '.\private$\%(MsmqDeadLetterQueues.Identity)'." Condition=" '$(_CoincidingHosts)' != '' " />

  </Target>

  <!--
     _____                              _   _                        _____            _     _             _   _
    |  __ \                            | \ | |                      |  __ \          (_)   | |           | | (_)
    | |__) _ __ ___   ___ ___ ___ ___  |  \| | __ _ _ __ ___   ___  | |__) |___  __ _ _ ___| |_ _ __ __ _| |_ _  ___  _ __
    |  ___| '__/ _ \ / __/ _ / __/ __| | . ` |/ _` | '_ ` _ \ / _ \ |  _  // _ \/ _` | / __| __| '__/ _` | __| |/ _ \| '_ \
    | |   | | | (_) | (_|  __\__ \__ \ | |\  | (_| | | | | | |  __/ | | \ |  __| (_| | \__ | |_| | | (_| | |_| | (_) | | | |
    |_|   |_|  \___/ \___\___|___|___/ |_| \_|\__,_|_| |_| |_|\___| |_|  \_\___|\__, |_|___/\__|_|  \__,_|\__|_|\___/|_| |_|
                                                                                 __/ |
                                                                                |___/
    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=Process%20Name%20Registration -->

  <Target Name="RegisterProcessNames" Condition=" '$(DeployBizTalkMgmtDB)' == 'true' "
          DependsOnTargets="RegisterComponentProcessNames;RegisterOrchestrationProcessNames">
  </Target>

  <Target Name="UnregisterProcessNames" Condition=" '$(DeployBizTalkMgmtDB)' == 'true' "
          DependsOnTargets="UnregisterComponentProcessNames;UnregisterOrchestrationProcessNames">
  </Target>

  <Target Name="RegisterComponentProcessNames" Condition=" '$(IncludeComponents)' == 'true' and '@(ComponentsQualified)' != '' ">
    <Message Text="Registering common process names..." />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /ShowCallStack /Server=$(ManagementDatabaseServer) &quot;@(ComponentsQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' " />

    <Message Text="Registered common process names." />
  </Target>

  <Target Name="UnregisterComponentProcessNames" Condition=" '$(IncludeComponents)' == 'true' and '@(ComponentsQualified)' != '' ">
    <Message Text="Unregistering common process names..." />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /u /ShowCallStack /Server=$(ManagementDatabaseServer) &quot;@(ComponentsQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' " />

    <Message Text="Unregistered common process names." />
  </Target>

  <Target Name="RegisterOrchestrationProcessNames" Condition=" '$(IncludeOrchestrations)' == 'true' and '@(OrchestrationsQualified)' != '' ">
    <Message Text="Registering orchestration process names..." />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /ShowCallStack /Server=$(ManagementDatabaseServer) &quot;@(OrchestrationsQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' " />

    <Message Text="Registered orchestration process names." />
  </Target>

  <Target Name="UnregisterOrchestrationProcessNames" Condition=" '$(IncludeOrchestrations)' == 'true' and '@(OrchestrationsQualified)' != '' ">
    <Message Text="Unregistering orchestration process names..." />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /u /ShowCallStack /Server=$(ManagementDatabaseServer) &quot;@(OrchestrationsQualified)&quot;"
          Condition=" '%(Identity)' == '%(Identity)' " />

    <Message Text="Unregistered orchestration process names." />
  </Target>

  <!--
     _____          _ _     _        _ _           _   _                   __  _____           _               _
    |  __ \        | (_)   | |      (_| |         | | (_)                 / / |  __ \         | |             (_)
    | |__) |___  __| |_ ___| |_ _ __ _| |__  _   _| |_ _  ___  _ __      / /  | |__) __ _  ___| | ____ _  __ _ _ _ __   __ _
    |  _  // _ \/ _` | / __| __| '__| | '_ \| | | | __| |/ _ \| '_ \    / /   |  ___/ _` |/ __| |/ / _` |/ _` | | '_ \ / _` |
    | | \ |  __| (_| | \__ | |_| |  | | |_) | |_| | |_| | (_) | | | |  / /    | |  | (_| | (__|   | (_| | (_| | | | | | (_| |
    |_|  \_\___|\__,_|_|___/\__|_|  |_|_.__/ \__,_|\__|_|\___/|_| |_| /_/     |_|   \__,_|\___|_|\_\__,_|\__, |_|_| |_|\__, |
                                                                                                          __/ |         __/ |
                                                                                                         |___/         |___/
    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=Redistribution%20%2F%20Packaging -->

  <!-- TODO ?? needed ?? -->
  <Target Name="CopyAdditionalItemsToRedist">
    <!--<Message Text="Copying additional items to redist folder..." />-->
    <!--<Message Text="Copied additional items to redist folder." />-->
  </Target>

  <Target Name="CopyCustomDeployToolsToRedist" Condition=" '@(RedistributableCustomDeployTools)' != '' ">
    <Message Text="Copying custom deploy tools to redist folder..." />

    <Copy DestinationFolder="$(RedistDir)\Deployment\Framework\DeployTools" SourceFiles="%(RedistributableCustomDeployTools.LocationPath)\%(RedistributableCustomDeployTools.Identity)" />

    <Message Text="Copied custom deploy tools to redist folder." />
  </Target>

  <Target Name="CopyCustomMsbuildProjectFilesToRedist" Condition=" '@(RedistributableCustomMsbuildProjectFiles)' != '' ">
    <Message Text="Copying custom MSBuild project files to redist folder..." />

    <Copy DestinationFolder="$(RedistDir)\Deployment" SourceFiles="%(RedistributableCustomMsbuildProjectFiles.LocationPath)\%(RedistributableCustomMsbuildProjectFiles.Identity)" />

    <Message Text="Copied custom MSBuild project files to redist folder." />
  </Target>

  <Target Name="CopyFrameworkToRedist">
    <!-- override CopyFrameworkToRedist target to only copy our version of the DeployTools -->
    <Message Text="Copying BizTalk Deployment Framework to redist folder..." />

    <ItemGroup>
      <FrameworkSourceGroup Include="$(DeploymentFrameworkTargetsPath)*.*" />
      <DeployToolsSourceGroup Include="$(DeployTools)\**\*.*" />
    </ItemGroup>
    <Copy DestinationFolder="$(RedistDir)\Deployment\Framework" SourceFiles="@(FrameworkSourceGroup->'%(FullPath)')"/>
    <Copy DestinationFolder="$(RedistDir)\Deployment\Framework\DeployTools\%(RecursiveDir)" SourceFiles="@(DeployToolsSourceGroup->'%(FullPath)')"/>

    <Message Text="Copied BizTalk Deployment Framework to redist folder." />
  </Target>

  <!--
     _____            _     _               ____                   _              _       _
    |  __ \          (_)   | |             / __ \                 | |            | |     | |
    | |__) |___  __ _ _ ___| |_ ___ _ __  | |  | |_   _  __ _ _ __| |_ ____      | | ___ | |__  ___
    |  _  // _ \/ _` | / __| __/ _ | '__| | |  | | | | |/ _` | '__| __|_  /  _   | |/ _ \| '_ \/ __|
    | | \ |  __| (_| | \__ | ||  __| |    | |__| | |_| | (_| | |  | |_ / /  | |__| | (_) | |_) \__ \
    |_|  \_\___|\__, |_|___/\__\___|_|     \___\_\\__,_|\__,_|_|   \__/___|  \____/ \___/|_.__/|___/
                 __/ |
                |___/
    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=Register%20Quartz%20Jobs -->

  <PropertyGroup>
    <QuartzDirectory Condition=" '$(QuartzDirectory)' == '' ">C:\Program Files (x86)\BizTalk Factory for BizTalk Server\1.0\Services\Quartz.Server\</QuartzDirectory>
  </PropertyGroup>

  <Target Name="RegisterQuartzJobs"
          Condition=" '$(IncludeQuartzJobs)' == 'True' and '@(QuartzJobsFiles)' != '' "
          Outputs="%(QuartzJobsFilesQualified.Fullpath)">

    <!-- Check if we are running on a machine that hosts Quartz-->
    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="FilterItems" InputItems1="$([MSBuild]::Unescape($(QuartzAgentTargetHosts)))" Metadata="Identity" RegexPattern="^\*$|^(?i:$(COMPUTERNAME))$">
      <Output TaskParameter="OutputItems" PropertyName="_CoincidingHosts"/>
    </MSBuild.ExtensionPack.Framework.MsBuildHelper>

    <!-- Define a property to hold the single item value -->
    <PropertyGroup>
      <TempJobsFile>%(QuartzJobsFilesQualified.Fullpath)</TempJobsFile>
    </PropertyGroup>
    <!-- read the current configuration value -->
    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="ReadAttribute"
                                       File="$(QuartzDirectory)Quartz.Server.exe.config"
                                       XPath="/configuration/quartz/add[@key='quartz.plugin.xml.fileNames']/@value"
                                       Condition=" '$(_CoincidingHosts)' != '' ">
      <Output TaskParameter="Value" PropertyName="CurrentQuartzJobsFiles" />
    </MSBuild.ExtensionPack.Xml.XmlFile>
    <!-- Append the job file path to the current list of job files -->
    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="UpdateAttribute"
                                       File="$(QuartzDirectory)Quartz.Server.exe.config"
                                       XPath="/configuration/quartz/add[@key='quartz.plugin.xml.fileNames']/@value"
                                       Value="$(CurrentQuartzJobsFiles),$(TempJobsFile)"
                                       Condition=" '$(_CoincidingHosts)' != '' "/>
  </Target>

  <Target Name="UnregisterQuartzJobs"
          Condition=" '$(IncludeQuartzJobs)' == 'True' and '@(QuartzJobsFiles)' != '' "
          Outputs="%(QuartzJobsFilesQualified.Fullpath)">

    <!-- Check if we are running on a machine that hosts Quartz-->
    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="FilterItems" InputItems1="$([MSBuild]::Unescape($(QuartzAgentTargetHosts)))" Metadata="Identity" RegexPattern="^\*$|^(?i:$(COMPUTERNAME))$">
      <Output TaskParameter="OutputItems" PropertyName="_CoincidingHosts"/>
    </MSBuild.ExtensionPack.Framework.MsBuildHelper>

    <!-- Define a property to hold the single item value -->
    <PropertyGroup>
      <TempJobsFile>%(QuartzJobsFilesQualified.Fullpath)</TempJobsFile>
    </PropertyGroup>
    <!-- read the current configuration value -->
    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="ReadAttribute"
                                       File="$(QuartzDirectory)Quartz.Server.exe.config"
                                       XPath="/configuration/quartz/add[@key='quartz.plugin.xml.fileNames']/@value"
                                       Condition=" '$(_CoincidingHosts)' != '' ">
      <Output TaskParameter="Value" PropertyName="CurrentQuartzJobsFiles" />
    </MSBuild.ExtensionPack.Xml.XmlFile>
    <!-- remove the job file from the list -->
    <MSBuild.ExtensionPack.Framework.TextString TaskAction="Replace" OldString="$(CurrentQuartzJobsFiles)" OldValue=",$(TempJobsFile)" NewValue="">
      <Output PropertyName="NewJobsFilesList" TaskParameter="NewString"/>
    </MSBuild.ExtensionPack.Framework.TextString>
    <!-- Update with the new list -->
    <MSBuild.ExtensionPack.Xml.XmlFile TaskAction="UpdateAttribute"
                                       File="$(QuartzDirectory)Quartz.Server.exe.config"
                                       XPath="/configuration/quartz/add[@key='quartz.plugin.xml.fileNames']/@value"
                                       Value="$(NewJobsFilesList)" 
                                       Condition=" '$(_CoincidingHosts)' != '' "/>
  </Target>

  <Target Name="CopyQuartzJobsFilesToRedist" Condition=" '$(IncludeQuartzJobs)' == 'True' and '@(QuartzJobsFiles)' != '' ">
    <Message Text="Copying Quartz jobs files to redist folder..." />

    <Copy DestinationFolder="$(RedistDir)"
          SourceFiles="%(QuartzJobsFiles.LocationPath)\$([System.IO.Path]::GetFileNameWithoutExtension('%(QuartzJobsFiles.Identity)')).template.xml" />

    <Message Text="Copied Quartz jobs files to redist folder." />
  </Target>

  <!--
    __          ___           _                      _____                 _
    \ \        / (_)         | |                    / ____|               (_)
     \ \  /\  / / _ _ __   __| | _____      _____  | (___   ___ _ ____   ___  ___ ___ ___
      \ \/  \/ / | | '_ \ / _` |/ _ \ \ /\ / / __|  \___ \ / _ | '__\ \ / | |/ __/ _ / __|
       \  /\  /  | | | | | (_| | (_) \ V  V /\__ \  ____) |  __| |   \ V /| | (_|  __\__ \
        \/  \/   |_|_| |_|\__,_|\___/ \_/\_/ |___/ |_____/ \___|_|    \_/ |_|\___\___|___/


    http://patorjk.com/software/taag/#p=display&h=3&v=3&f=Big&t=Windows%20Services -->

  <ItemDefinitionGroup>
    <!-- WindowsServices ItemGroup default values -->
    <WindowsServices>
      <ServiceAccountNameParameter>ServiceAccountName</ServiceAccountNameParameter>
      <ServiceAccountNameArgument>$(USERDOMAIN)\$(BizTalkServerAccountName)</ServiceAccountNameArgument>
      <ServiceAccountPasswordParameter>ServiceAccountPassword</ServiceAccountPasswordParameter>
      <ServiceAccountPasswordArgument>$(BizTalkServerAccountPassword)</ServiceAccountPasswordArgument>
      <ServiceStartModeParameter>ServiceStartMode</ServiceStartModeParameter>
      <ServiceStartModeArgument>disabled</ServiceStartModeArgument>
      <TargetHosts>*</TargetHosts>
    </WindowsServices>
  </ItemDefinitionGroup>

  <Target Name="DeployWindowsServices"
          DependsOnTargets="BuildWindowsServicesQualified"
          Outputs="%(WindowsServicesQualified.Identity)%(WindowsServicesQualified.TargetHosts)"
          Condition=" '$(IncludeWindowsServices)' == 'true' and '@(WindowsServices)' != '' ">
    <Message Text="Deploying Windows Service '%(WindowsServicesQualified.Identity)'..." Condition=" '%(WindowsServicesQualified.Identity)' != '' " />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /ShowCallStack /%(WindowsServicesQualified.ServiceAccountNameParameter)=&quot;%(WindowsServicesQualified.ServiceAccountNameArgument)&quot; /%(WindowsServicesQualified.ServiceAccountPasswordParameter)=%(WindowsServicesQualified.ServiceAccountPasswordArgument) /%(WindowsServicesQualified.ServiceStartModeParameter)=%(WindowsServicesQualified.ServiceStartModeArgument) &quot;%(WindowsServicesQualified.LocationPath)\%(WindowsServicesQualified.ServiceAssembly)&quot;"
          Condition=" '%(WindowsServicesQualified.Identity)' != '' " />

    <Message Text="Deployed Windows Service '%(WindowsServicesQualified.Identity)'." Condition=" '%(WindowsServicesQualified.Identity)' != '' " />
  </Target>

  <Target Name="UndeployWindowsServices"
          DependsOnTargets="BuildWindowsServicesQualified"
          Outputs="%(WindowsServicesQualified.Identity)%(WindowsServicesQualified.TargetHosts)"
          Condition=" '$(IncludeWindowsServices)' == 'true' and '@(WindowsServices)' != '' ">
    <Message Text="Undeploying Windows Service '%(WindowsServicesQualified.Identity)'..." Condition=" '%(WindowsServicesQualified.Identity)' != '' " />

    <Exec Command="$(FrameworkDir)\InstallUtil.exe /ShowCallStack /uninstall &quot;%(WindowsServicesQualified.LocationPath)\%(WindowsServicesQualified.ServiceAssembly)&quot;" Condition=" '%(WindowsServicesQualified.Identity)' != '' " />
    <Delete
      Files="%(WindowsServicesQualified.LocationPath)\%(WindowsServicesQualified.ServiceAssembly).config"
      Condition="Exists('%(WindowsServicesQualified.LocationPath)\%(WindowsServicesQualified.ServiceAssembly).config')" />
    <Delete
      Files="%(WindowsServicesQualified.LocationPath)\log4net.config"
      Condition="Exists('%(WindowsServicesQualified.LocationPath)\log4net.config')" />

    <Message Text="Undeployed Windows Service '%(WindowsServicesQualified.Identity)'." Condition=" '%(WindowsServicesQualified.Identity)' != '' " />
  </Target>

  <Target Name="StartWindowsServices"
          DependsOnTargets="BuildWindowsServicesQualified"
          Outputs="%(WindowsServicesQualified.Identity)%(WindowsServicesQualified.TargetHosts)"
          Condition=" '$(IncludeWindowsServices)' == 'true' and '@(WindowsServices)' != '' ">

    <Message Text="Starting windows service '%(WindowsServicesQualified.Identity)'..." />
    
    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Start" ServiceName="%(WindowsServicesQualified.ServiceName)"
                                                   Condition=" '%(WindowsServicesQualified.Identity)' != '' " />
    
    <Message Text="Started windows service '%(WindowsServicesQualified.Identity)'..." />
  </Target>

  <Target Name="StopWindowsServices"
          DependsOnTargets="BuildWindowsServicesQualified"
          Outputs="%(WindowsServicesQualified.Identity)%(WindowsServicesQualified.TargetHosts)"
          Condition=" '$(IncludeWindowsServices)' == 'true' and '@(WindowsServices)' != '' ">

    <Message Text="Stopping windows service '%(WindowsServicesQualified.Identity)'..." />
    
    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="Stop" ServiceName="%(WindowsServicesQualified.ServiceName)"
                                                   Condition=" '%(WindowsServicesQualified.Identity)' != '' " />
    
    <Message Text="Stopped windows service '%(WindowsServicesQualified.Identity)'..." />
  </Target>
  
  <Target Name="BuildWindowsServicesQualified" Outputs="%(WindowsServices.Identity)%(WindowsServices.TargetHosts)" Condition=" '$(IncludeWindowsServices)' == 'true' and '@(WindowsServices)' != '' ">
    <!-- filter TargetHosts to keep only those that coincides with the local host -->
    
    <MSBuild.ExtensionPack.Framework.MsBuildHelper TaskAction="FilterItems" InputItems1="$([MSBuild]::Unescape(%(WindowsServices.TargetHosts)))" Metadata="Identity" RegexPattern="^\*$|^(?i:$(COMPUTERNAME))$">
      <Output TaskParameter="OutputItems" PropertyName="_CoincidingHosts"/>
    </MSBuild.ExtensionPack.Framework.MsBuildHelper>
    
    <Message Text="Including service %(WindowsServices.Identity) for this host" Condition="'$(_CoincidingHosts)' != ''" />

    <!-- keep only the services whose TargetHosts have CoincidingHosts -->
    <ItemGroup Condition=" '$(_CoincidingHosts)' != '' ">
      <WindowsServicesQualified Include="@(WindowsServices)">
        <!-- rewrite LocationPath to align to CopyWindowsServiceFilesToRedist's target folder -->
        <LocationPath Condition=" '$(Configuration)' == 'Server' ">%(LocationPath)\Services\%(WindowsServices.Identity)</LocationPath>
      </WindowsServicesQualified>
    </ItemGroup>
  </Target>

  <Target Name="EnsureWindowsServiceConfigFilesPreprocessing" DependsOnTargets="BuildWindowsServicesQualified" Condition=" '$(IncludeWindowsServices)' == 'true' and '@(WindowsServices)' != '' ">
    <Message Text="Making sure Windows service config files will be preprocessed..." />

    <ItemGroup>
      <!-- %(ServiceAssembly).config -->
      <_WindowsServiceConfigFilesToXmlPreprocess
        Include="%(WindowsServicesQualified.ServiceAssembly).template.config"
        Condition="Exists('%(WindowsServicesQualified.LocationPath)\%(WindowsServicesQualified.ServiceAssembly).template.config')">
        <LocationPath>%(WindowsServicesQualified.LocationPath)</LocationPath>
        <OutputFilename>%(WindowsServicesQualified.ServiceAssembly).config</OutputFilename>
      </_WindowsServiceConfigFilesToXmlPreprocess>
      <!-- log4net.config -->
      <_WindowsServiceConfigFilesToXmlPreprocess
        Include="$([System.IO.Path]::GetFileNameWithoutExtension('%(WindowsServicesQualified.ServiceAssembly)')).log4net.template.config"
        Condition="Exists('%(WindowsServicesQualified.LocationPath)\$([System.IO.Path]::GetFileNameWithoutExtension(`%(WindowsServicesQualified.ServiceAssembly)`)).log4net.template.config')">
        <LocationPath>%(WindowsServicesQualified.LocationPath)</LocationPath>
        <OutputFilename>log4net.config</OutputFilename>
      </_WindowsServiceConfigFilesToXmlPreprocess>
      <_WindowsServiceConfigFilesToXmlPreprocessQualified Include="@(_WindowsServiceConfigFilesToXmlPreprocess -> '%(LocationPath)\%(Identity)')" />
    </ItemGroup>

    <ItemGroup>
      <FilesToXmlPreprocess Include="@(_WindowsServiceConfigFilesToXmlPreprocess)" />
      <FilesToXmlPreprocessQualified Include="@(_WindowsServiceConfigFilesToXmlPreprocessQualified)" />
    </ItemGroup>

    <Message Text="Injecting preprocessing for %(_WindowsServiceConfigFilesToXmlPreprocessQualified.Identity)"
             Condition=" '@(_WindowsServiceConfigFilesToXmlPreprocessQualified)' != '' " />

    <ItemGroup>
      <_WindowsServiceConfigFilesToXmlPreprocess Remove="@(_WindowsServiceConfigFilesToXmlPreprocess)" />
      <_WindowsServiceConfigFilesToXmlPreprocessQualified Remove="@(_WindowsServiceConfigFilesToXmlPreprocessQualified)" />
    </ItemGroup>

    <Message Text="Made sure Windows service config files will be preprocessed." />
  </Target>

  <Target Name="CopyWindowsServiceFilesToRedist" Condition=" '@(WindowsServices)' != '' ">
    <Message Text="Copying Windows service redistributable files to redist folder..." />

    <ItemGroup>
      <RedistributableWindowsServiceFiles Include="%(WindowsServices.ServiceAssembly);%(WindowsServices.Redistributables)">
        <LocationPath>%(WindowsServices.LocationPath)</LocationPath>
        <ServiceName>%(WindowsServices.Identity)</ServiceName>
      </RedistributableWindowsServiceFiles>
    </ItemGroup>

    <Copy DestinationFolder="$(RedistDir)\Services\%(RedistributableWindowsServiceFiles.ServiceName)"
          SourceFiles="%(RedistributableWindowsServiceFiles.LocationPath)\%(RedistributableWindowsServiceFiles.Identity)"
          Condition=" '@(RedistributableWindowsServiceFiles)' != '' " />

    <ItemGroup>
      <RedistributableWindowsServiceFiles Remove="@(RedistributableWindowsServiceFiles)" />
    </ItemGroup>

    <Message Text="Copied Windows service redistributable files to redist folder." />
  </Target>

</Project>
