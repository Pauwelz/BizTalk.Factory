#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.6407
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Be.Stateless.BizTalk.Monitoring.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="BAMPrimaryImport")]
	internal partial class TrackingActivityContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProcess(Process instance);
    partial void UpdateProcess(Process instance);
    partial void DeleteProcess(Process instance);
    partial void InsertProcessingStep(ProcessingStep instance);
    partial void UpdateProcessingStep(ProcessingStep instance);
    partial void DeleteProcessingStep(ProcessingStep instance);
    partial void InsertProcessMessagingStep(ProcessMessagingStep instance);
    partial void UpdateProcessMessagingStep(ProcessMessagingStep instance);
    partial void DeleteProcessMessagingStep(ProcessMessagingStep instance);
    partial void InsertMessagingStep(MessagingStep instance);
    partial void UpdateMessagingStep(MessagingStep instance);
    partial void DeleteMessagingStep(MessagingStep instance);
    partial void InsertContext(Context instance);
    partial void UpdateContext(Context instance);
    partial void DeleteContext(Context instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    #endregion
		
		public TrackingActivityContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TrackingActivityContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TrackingActivityContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TrackingActivityContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Process> Processes
		{
			get
			{
				return this.GetTable<Process>();
			}
		}
		
		public System.Data.Linq.Table<ProcessingStep> ProcessingSteps
		{
			get
			{
				return this.GetTable<ProcessingStep>();
			}
		}
		
		public System.Data.Linq.Table<ProcessMessagingStep> ProcessMessagingSteps
		{
			get
			{
				return this.GetTable<ProcessMessagingStep>();
			}
		}
		
		public System.Data.Linq.Table<MessagingStep> MessagingSteps
		{
			get
			{
				return this.GetTable<MessagingStep>();
			}
		}
		
		public System.Data.Linq.Table<Context> Contexts
		{
			get
			{
				return this.GetTable<Context>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
	}
	
	[Table(Name="dbo.bam_Process_AllInstances")]
	public partial class Process : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ActivityID;
		
		private System.Nullable<System.DateTime> _BeginTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _InterchangeID;
		
		private string _ProcessName;
		
		private string _Status;
		
		private string _Value1;
		
		private string _Value2;
		
		private string _Value3;
		
		private EntitySet<ProcessingStep> _ProcessingSteps;
		
		private EntitySet<ProcessMessagingStep> _ProcessMessagingSteps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIDChanging(string value);
    partial void OnActivityIDChanged();
    partial void OnBeginTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnInterchangeIDChanging(string value);
    partial void OnInterchangeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnValue1Changing(string value);
    partial void OnValue1Changed();
    partial void OnValue2Changing(string value);
    partial void OnValue2Changed();
    partial void OnValue3Changing(string value);
    partial void OnValue3Changed();
    #endregion
		
		public Process()
		{
			this._ProcessingSteps = new EntitySet<ProcessingStep>(new Action<ProcessingStep>(this.attach_ProcessingSteps), new Action<ProcessingStep>(this.detach_ProcessingSteps));
			this._ProcessMessagingSteps = new EntitySet<ProcessMessagingStep>(new Action<ProcessMessagingStep>(this.attach_ProcessMessagingSteps), new Action<ProcessMessagingStep>(this.detach_ProcessMessagingSteps));
			OnCreated();
		}
		
		[Column(Storage="_ActivityID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_InterchangeID", DbType="NVarChar(32)")]
		public string InterchangeID
		{
			get
			{
				return this._InterchangeID;
			}
			set
			{
				if ((this._InterchangeID != value))
				{
					this.OnInterchangeIDChanging(value);
					this.SendPropertyChanging();
					this._InterchangeID = value;
					this.SendPropertyChanged("InterchangeID");
					this.OnInterchangeIDChanged();
				}
			}
		}
		
		[Column(Name="ProcessName", Storage="_ProcessName", DbType="NVarChar(128)")]
		public string Name
		{
			get
			{
				return this._ProcessName;
			}
			set
			{
				if ((this._ProcessName != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._ProcessName = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(9)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Value1", DbType="NVarChar(60)")]
		public string Value1
		{
			get
			{
				return this._Value1;
			}
			set
			{
				if ((this._Value1 != value))
				{
					this.OnValue1Changing(value);
					this.SendPropertyChanging();
					this._Value1 = value;
					this.SendPropertyChanged("Value1");
					this.OnValue1Changed();
				}
			}
		}
		
		[Column(Storage="_Value2", DbType="NVarChar(60)")]
		public string Value2
		{
			get
			{
				return this._Value2;
			}
			set
			{
				if ((this._Value2 != value))
				{
					this.OnValue2Changing(value);
					this.SendPropertyChanging();
					this._Value2 = value;
					this.SendPropertyChanged("Value2");
					this.OnValue2Changed();
				}
			}
		}
		
		[Column(Storage="_Value3", DbType="NVarChar(60)")]
		public string Value3
		{
			get
			{
				return this._Value3;
			}
			set
			{
				if ((this._Value3 != value))
				{
					this.OnValue3Changing(value);
					this.SendPropertyChanging();
					this._Value3 = value;
					this.SendPropertyChanged("Value3");
					this.OnValue3Changed();
				}
			}
		}
		
		[Association(Name="Process_ProcessingStep", Storage="_ProcessingSteps", ThisKey="ActivityID", OtherKey="ProcessActivityID")]
		public EntitySet<ProcessingStep> ProcessingSteps
		{
			get
			{
				return this._ProcessingSteps;
			}
			set
			{
				this._ProcessingSteps.Assign(value);
			}
		}
		
		[Association(Name="Process_ProcessMessagingStep", Storage="_ProcessMessagingSteps", ThisKey="ActivityID", OtherKey="ProcessActivityID")]
		public EntitySet<ProcessMessagingStep> ProcessMessagingSteps
		{
			get
			{
				return this._ProcessMessagingSteps;
			}
			set
			{
				this._ProcessMessagingSteps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessingSteps(ProcessingStep entity)
		{
			this.SendPropertyChanging();
			entity.Process = this;
		}
		
		private void detach_ProcessingSteps(ProcessingStep entity)
		{
			this.SendPropertyChanging();
			entity.Process = null;
		}
		
		private void attach_ProcessMessagingSteps(ProcessMessagingStep entity)
		{
			this.SendPropertyChanging();
			entity.Process = this;
		}
		
		private void detach_ProcessMessagingSteps(ProcessMessagingStep entity)
		{
			this.SendPropertyChanging();
			entity.Process = null;
		}
	}
	
	[Table(Name="dbo.bam_ProcessingStep_AllInstances")]
	public partial class ProcessingStep : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ActivityID;
		
		private System.Nullable<System.DateTime> _BeginTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _ErrorDescription;
		
		private string _MachineName;
		
		private string _ProcessActivityID;
		
		private string _Status;
		
		private string _StepName;
		
		private EntityRef<Process> _Process;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIDChanging(string value);
    partial void OnActivityIDChanged();
    partial void OnBeginTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnErrorDescriptionChanging(string value);
    partial void OnErrorDescriptionChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnProcessActivityIDChanging(string value);
    partial void OnProcessActivityIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProcessingStep()
		{
			this._Process = default(EntityRef<Process>);
			OnCreated();
		}
		
		[Column(Storage="_ActivityID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorDescription", DbType="NVarChar(2048)")]
		public string ErrorDescription
		{
			get
			{
				return this._ErrorDescription;
			}
			set
			{
				if ((this._ErrorDescription != value))
				{
					this.OnErrorDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ErrorDescription = value;
					this.SendPropertyChanged("ErrorDescription");
					this.OnErrorDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MachineName", DbType="NVarChar(20)")]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessActivityID", DbType="NVarChar(32)")]
		public string ProcessActivityID
		{
			get
			{
				return this._ProcessActivityID;
			}
			set
			{
				if ((this._ProcessActivityID != value))
				{
					if (this._Process.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcessActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ProcessActivityID = value;
					this.SendPropertyChanged("ProcessActivityID");
					this.OnProcessActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(9)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="StepName", Storage="_StepName", DbType="NVarChar(128)")]
		public string Name
		{
			get
			{
				return this._StepName;
			}
			set
			{
				if ((this._StepName != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._StepName = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Process_ProcessingStep", Storage="_Process", ThisKey="ProcessActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public Process Process
		{
			get
			{
				return this._Process.Entity;
			}
			set
			{
				Process previousValue = this._Process.Entity;
				if (((previousValue != value) 
							|| (this._Process.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Process.Entity = null;
						previousValue.ProcessingSteps.Remove(this);
					}
					this._Process.Entity = value;
					if ((value != null))
					{
						value.ProcessingSteps.Add(this);
						this._ProcessActivityID = value.ActivityID;
					}
					else
					{
						this._ProcessActivityID = default(string);
					}
					this.SendPropertyChanged("Process");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.bam_ProcessMessagingStep_AllInstances")]
	public partial class ProcessMessagingStep : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ActivityID;
		
		private string _MessagingStepActivityID;
		
		private string _MessagingStepStatus;
		
		private string _ProcessActivityID;
		
		private EntityRef<Process> _Process;
		
		private EntityRef<MessagingStep> _MessagingStep;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIDChanging(string value);
    partial void OnActivityIDChanged();
    partial void OnMessagingStepActivityIDChanging(string value);
    partial void OnMessagingStepActivityIDChanged();
    partial void OnMessagingStepStatusChanging(string value);
    partial void OnMessagingStepStatusChanged();
    partial void OnProcessActivityIDChanging(string value);
    partial void OnProcessActivityIDChanged();
    #endregion
		
		public ProcessMessagingStep()
		{
			this._Process = default(EntityRef<Process>);
			this._MessagingStep = default(EntityRef<MessagingStep>);
			OnCreated();
		}
		
		[Column(Storage="_ActivityID", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessagingStepActivityID", DbType="NVarChar(128)", CanBeNull=false, IsPrimaryKey=true)]
		public string MessagingStepActivityID
		{
			get
			{
				return this._MessagingStepActivityID;
			}
			set
			{
				if ((this._MessagingStepActivityID != value))
				{
					if (this._MessagingStep.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessagingStepActivityIDChanging(value);
					this.SendPropertyChanging();
					this._MessagingStepActivityID = value;
					this.SendPropertyChanged("MessagingStepActivityID");
					this.OnMessagingStepActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessagingStepStatus", DbType="NVarChar(13)")]
		public string MessagingStepStatus
		{
			get
			{
				return this._MessagingStepStatus;
			}
			set
			{
				if ((this._MessagingStepStatus != value))
				{
					this.OnMessagingStepStatusChanging(value);
					this.SendPropertyChanging();
					this._MessagingStepStatus = value;
					this.SendPropertyChanged("MessagingStepStatus");
					this.OnMessagingStepStatusChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessActivityID", DbType="NVarChar(128)", CanBeNull=false, IsPrimaryKey=true)]
		public string ProcessActivityID
		{
			get
			{
				return this._ProcessActivityID;
			}
			set
			{
				if ((this._ProcessActivityID != value))
				{
					if (this._Process.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcessActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ProcessActivityID = value;
					this.SendPropertyChanged("ProcessActivityID");
					this.OnProcessActivityIDChanged();
				}
			}
		}
		
		[Association(Name="Process_ProcessMessagingStep", Storage="_Process", ThisKey="ProcessActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public Process Process
		{
			get
			{
				return this._Process.Entity;
			}
			set
			{
				Process previousValue = this._Process.Entity;
				if (((previousValue != value) 
							|| (this._Process.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Process.Entity = null;
						previousValue.ProcessMessagingSteps.Remove(this);
					}
					this._Process.Entity = value;
					if ((value != null))
					{
						value.ProcessMessagingSteps.Add(this);
						this._ProcessActivityID = value.ActivityID;
					}
					else
					{
						this._ProcessActivityID = default(string);
					}
					this.SendPropertyChanged("Process");
				}
			}
		}
		
		[Association(Name="MessagingStep_ProcessMessagingStep", Storage="_MessagingStep", ThisKey="MessagingStepActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public MessagingStep MessagingStep
		{
			get
			{
				return this._MessagingStep.Entity;
			}
			set
			{
				MessagingStep previousValue = this._MessagingStep.Entity;
				if (((previousValue != value) 
							|| (this._MessagingStep.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessagingStep.Entity = null;
						previousValue.ProcessMessagingSteps.Remove(this);
					}
					this._MessagingStep.Entity = value;
					if ((value != null))
					{
						value.ProcessMessagingSteps.Add(this);
						this._MessagingStepActivityID = value.ActivityID;
					}
					else
					{
						this._MessagingStepActivityID = default(string);
					}
					this.SendPropertyChanged("MessagingStep");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.bam_MessagingStep_AllInstances")]
	public partial class MessagingStep : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ActivityID;
		
		private string _ErrorCode;
		
		private string _ErrorDescription;
		
		private string _InterchangeID;
		
		private string _MachineName;
		
		private string _MessageID;
		
		private System.Nullable<int> _MessageSize;
		
		private string _MessageType;
		
		private string _PortName;
		
		private System.Nullable<int> _RetryCount;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _Time;
		
		private string _TransportLocation;
		
		private string _TransportType;
		
		private string _Value1;
		
		private string _Value2;
		
		private string _Value3;
		
		private EntitySet<ProcessMessagingStep> _ProcessMessagingSteps;
		
		private EntityRef<Context> _Contexts;
		
		private EntityRef<Message> _Messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIDChanging(string value);
    partial void OnActivityIDChanged();
    partial void OnErrorCodeChanging(string value);
    partial void OnErrorCodeChanged();
    partial void OnErrorDescriptionChanging(string value);
    partial void OnErrorDescriptionChanged();
    partial void OnInterchangeIDChanging(string value);
    partial void OnInterchangeIDChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnMessageIDChanging(string value);
    partial void OnMessageIDChanged();
    partial void OnMessageSizeChanging(System.Nullable<int> value);
    partial void OnMessageSizeChanged();
    partial void OnMessageTypeChanging(string value);
    partial void OnMessageTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRetryCountChanging(System.Nullable<int> value);
    partial void OnRetryCountChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnTransportLocationChanging(string value);
    partial void OnTransportLocationChanged();
    partial void OnTransportTypeChanging(string value);
    partial void OnTransportTypeChanged();
    partial void OnValue1Changing(string value);
    partial void OnValue1Changed();
    partial void OnValue2Changing(string value);
    partial void OnValue2Changed();
    partial void OnValue3Changing(string value);
    partial void OnValue3Changed();
    #endregion
		
		public MessagingStep()
		{
			this._ProcessMessagingSteps = new EntitySet<ProcessMessagingStep>(new Action<ProcessMessagingStep>(this.attach_ProcessMessagingSteps), new Action<ProcessMessagingStep>(this.detach_ProcessMessagingSteps));
			this._Contexts = default(EntityRef<Context>);
			this._Messages = default(EntityRef<Message>);
			OnCreated();
		}
		
		[Column(Storage="_ActivityID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorCode", DbType="NVarChar(20)")]
		public string ErrorCode
		{
			get
			{
				return this._ErrorCode;
			}
			set
			{
				if ((this._ErrorCode != value))
				{
					this.OnErrorCodeChanging(value);
					this.SendPropertyChanging();
					this._ErrorCode = value;
					this.SendPropertyChanged("ErrorCode");
					this.OnErrorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorDescription", DbType="NVarChar(2048)")]
		public string ErrorDescription
		{
			get
			{
				return this._ErrorDescription;
			}
			set
			{
				if ((this._ErrorDescription != value))
				{
					this.OnErrorDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ErrorDescription = value;
					this.SendPropertyChanged("ErrorDescription");
					this.OnErrorDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_InterchangeID", DbType="NVarChar(32)")]
		public string InterchangeID
		{
			get
			{
				return this._InterchangeID;
			}
			set
			{
				if ((this._InterchangeID != value))
				{
					this.OnInterchangeIDChanging(value);
					this.SendPropertyChanging();
					this._InterchangeID = value;
					this.SendPropertyChanged("InterchangeID");
					this.OnInterchangeIDChanged();
				}
			}
		}
		
		[Column(Storage="_MachineName", DbType="NVarChar(20)")]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[Column(Storage="_MessageID", DbType="NVarChar(32)")]
		public string MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessageSize", DbType="Int")]
		public System.Nullable<int> MessageSize
		{
			get
			{
				return this._MessageSize;
			}
			set
			{
				if ((this._MessageSize != value))
				{
					this.OnMessageSizeChanging(value);
					this.SendPropertyChanging();
					this._MessageSize = value;
					this.SendPropertyChanged("MessageSize");
					this.OnMessageSizeChanged();
				}
			}
		}
		
		[Column(Storage="_MessageType", DbType="NVarChar(256)")]
		public string MessageType
		{
			get
			{
				return this._MessageType;
			}
			set
			{
				if ((this._MessageType != value))
				{
					this.OnMessageTypeChanging(value);
					this.SendPropertyChanging();
					this._MessageType = value;
					this.SendPropertyChanged("MessageType");
					this.OnMessageTypeChanged();
				}
			}
		}
		
		[Column(Name="PortName", Storage="_PortName", DbType="NVarChar(128)")]
		public string Name
		{
			get
			{
				return this._PortName;
			}
			set
			{
				if ((this._PortName != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._PortName = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_RetryCount", DbType="Int")]
		public System.Nullable<int> RetryCount
		{
			get
			{
				return this._RetryCount;
			}
			set
			{
				if ((this._RetryCount != value))
				{
					this.OnRetryCountChanging(value);
					this.SendPropertyChanging();
					this._RetryCount = value;
					this.SendPropertyChanged("RetryCount");
					this.OnRetryCountChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(13)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TransportLocation", DbType="NVarChar(256)")]
		public string TransportLocation
		{
			get
			{
				return this._TransportLocation;
			}
			set
			{
				if ((this._TransportLocation != value))
				{
					this.OnTransportLocationChanging(value);
					this.SendPropertyChanging();
					this._TransportLocation = value;
					this.SendPropertyChanged("TransportLocation");
					this.OnTransportLocationChanged();
				}
			}
		}
		
		[Column(Storage="_TransportType", DbType="NVarChar(30)")]
		public string TransportType
		{
			get
			{
				return this._TransportType;
			}
			set
			{
				if ((this._TransportType != value))
				{
					this.OnTransportTypeChanging(value);
					this.SendPropertyChanging();
					this._TransportType = value;
					this.SendPropertyChanged("TransportType");
					this.OnTransportTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Value1", DbType="NVarChar(60)")]
		public string Value1
		{
			get
			{
				return this._Value1;
			}
			set
			{
				if ((this._Value1 != value))
				{
					this.OnValue1Changing(value);
					this.SendPropertyChanging();
					this._Value1 = value;
					this.SendPropertyChanged("Value1");
					this.OnValue1Changed();
				}
			}
		}
		
		[Column(Storage="_Value2", DbType="NVarChar(60)")]
		public string Value2
		{
			get
			{
				return this._Value2;
			}
			set
			{
				if ((this._Value2 != value))
				{
					this.OnValue2Changing(value);
					this.SendPropertyChanging();
					this._Value2 = value;
					this.SendPropertyChanged("Value2");
					this.OnValue2Changed();
				}
			}
		}
		
		[Column(Storage="_Value3", DbType="NVarChar(60)")]
		public string Value3
		{
			get
			{
				return this._Value3;
			}
			set
			{
				if ((this._Value3 != value))
				{
					this.OnValue3Changing(value);
					this.SendPropertyChanging();
					this._Value3 = value;
					this.SendPropertyChanged("Value3");
					this.OnValue3Changed();
				}
			}
		}
		
		[Association(Name="MessagingStep_ProcessMessagingStep", Storage="_ProcessMessagingSteps", ThisKey="ActivityID", OtherKey="MessagingStepActivityID")]
		public EntitySet<ProcessMessagingStep> ProcessMessagingSteps
		{
			get
			{
				return this._ProcessMessagingSteps;
			}
			set
			{
				this._ProcessMessagingSteps.Assign(value);
			}
		}
		
		[Association(Name="MessagingStep_Context", Storage="_Contexts", ThisKey="ActivityID", OtherKey="MessagingStepActivityID", IsUnique=true, IsForeignKey=false)]
		public Context Context
		{
			get
			{
				return this._Contexts.Entity;
			}
			set
			{
				Context previousValue = this._Contexts.Entity;
				if (((previousValue != value) 
							|| (this._Contexts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contexts.Entity = null;
						previousValue.MessagingStep = null;
					}
					this._Contexts.Entity = value;
					if ((value != null))
					{
						value.MessagingStep = this;
					}
					this.SendPropertyChanged("Context");
				}
			}
		}
		
		[Association(Name="MessagingStep_Message", Storage="_Messages", ThisKey="ActivityID", OtherKey="MessagingStepActivityID", IsUnique=true, IsForeignKey=false)]
		public Message Message
		{
			get
			{
				return this._Messages.Entity;
			}
			set
			{
				Message previousValue = this._Messages.Entity;
				if (((previousValue != value) 
							|| (this._Messages.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Messages.Entity = null;
						previousValue.MessagingStep = null;
					}
					this._Messages.Entity = value;
					if ((value != null))
					{
						value.MessagingStep = this;
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessMessagingSteps(ProcessMessagingStep entity)
		{
			this.SendPropertyChanging();
			entity.MessagingStep = this;
		}
		
		private void detach_ProcessMessagingSteps(ProcessMessagingStep entity)
		{
			this.SendPropertyChanging();
			entity.MessagingStep = null;
		}
	}
	
	[Table(Name="dbo.vw_MessagingStepContexts")]
	public partial class Context : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MessagingStepActivityID;
		
		private string _EncodedContext;
		
		private EntityRef<MessagingStep> _MessagingStep;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessagingStepActivityIDChanging(string value);
    partial void OnMessagingStepActivityIDChanged();
    partial void OnEncodedContextChanging(string value);
    partial void OnEncodedContextChanged();
    #endregion
		
		public Context()
		{
			this._MessagingStep = default(EntityRef<MessagingStep>);
			OnCreated();
		}
		
		[Column(Storage="_MessagingStepActivityID", DbType="NVarChar(128)", CanBeNull=false, IsPrimaryKey=true)]
		public string MessagingStepActivityID
		{
			get
			{
				return this._MessagingStepActivityID;
			}
			set
			{
				if ((this._MessagingStepActivityID != value))
				{
					if (this._MessagingStep.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessagingStepActivityIDChanging(value);
					this.SendPropertyChanging();
					this._MessagingStepActivityID = value;
					this.SendPropertyChanged("MessagingStepActivityID");
					this.OnMessagingStepActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_EncodedContext", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string EncodedContext
		{
			get
			{
				return this._EncodedContext;
			}
			set
			{
				if ((this._EncodedContext != value))
				{
					this.OnEncodedContextChanging(value);
					this.SendPropertyChanging();
					this._EncodedContext = value;
					this.SendPropertyChanged("EncodedContext");
					this.OnEncodedContextChanged();
				}
			}
		}
		
		[Association(Name="MessagingStep_Context", Storage="_MessagingStep", ThisKey="MessagingStepActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public MessagingStep MessagingStep
		{
			get
			{
				return this._MessagingStep.Entity;
			}
			set
			{
				MessagingStep previousValue = this._MessagingStep.Entity;
				if (((previousValue != value) 
							|| (this._MessagingStep.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessagingStep.Entity = null;
						previousValue.Context = null;
					}
					this._MessagingStep.Entity = value;
					if ((value != null))
					{
						value.Context = this;
						this._MessagingStepActivityID = value.ActivityID;
					}
					else
					{
						this._MessagingStepActivityID = default(string);
					}
					this.SendPropertyChanged("MessagingStep");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.vw_MessagingStepMessages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MessagingStepActivityID;
		
		private string _EncodedBodyType;
		
		private string _EncodedBody;
		
		private EntityRef<MessagingStep> _MessagingStep;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessagingStepActivityIDChanging(string value);
    partial void OnMessagingStepActivityIDChanged();
    partial void OnEncodedBodyTypeChanging(string value);
    partial void OnEncodedBodyTypeChanged();
    partial void OnEncodedBodyChanging(string value);
    partial void OnEncodedBodyChanged();
    #endregion
		
		public Message()
		{
			this._MessagingStep = default(EntityRef<MessagingStep>);
			OnCreated();
		}
		
		[Column(Storage="_MessagingStepActivityID", DbType="NVarChar(128)", CanBeNull=false, IsPrimaryKey=true)]
		public string MessagingStepActivityID
		{
			get
			{
				return this._MessagingStepActivityID;
			}
			set
			{
				if ((this._MessagingStepActivityID != value))
				{
					if (this._MessagingStep.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessagingStepActivityIDChanging(value);
					this.SendPropertyChanging();
					this._MessagingStepActivityID = value;
					this.SendPropertyChanged("MessagingStepActivityID");
					this.OnMessagingStepActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_EncodedBodyType", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string EncodedBodyType
		{
			get
			{
				return this._EncodedBodyType;
			}
			set
			{
				if ((this._EncodedBodyType != value))
				{
					this.OnEncodedBodyTypeChanging(value);
					this.SendPropertyChanging();
					this._EncodedBodyType = value;
					this.SendPropertyChanged("EncodedBodyType");
					this.OnEncodedBodyTypeChanged();
				}
			}
		}
		
		[Column(Storage="_EncodedBody", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string EncodedBody
		{
			get
			{
				return this._EncodedBody;
			}
			set
			{
				if ((this._EncodedBody != value))
				{
					this.OnEncodedBodyChanging(value);
					this.SendPropertyChanging();
					this._EncodedBody = value;
					this.SendPropertyChanged("EncodedBody");
					this.OnEncodedBodyChanged();
				}
			}
		}
		
		[Association(Name="MessagingStep_Message", Storage="_MessagingStep", ThisKey="MessagingStepActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public MessagingStep MessagingStep
		{
			get
			{
				return this._MessagingStep.Entity;
			}
			set
			{
				MessagingStep previousValue = this._MessagingStep.Entity;
				if (((previousValue != value) 
							|| (this._MessagingStep.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessagingStep.Entity = null;
						previousValue.Message = null;
					}
					this._MessagingStep.Entity = value;
					if ((value != null))
					{
						value.Message = this;
						this._MessagingStepActivityID = value.ActivityID;
					}
					else
					{
						this._MessagingStepActivityID = default(string);
					}
					this.SendPropertyChanged("MessagingStep");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
